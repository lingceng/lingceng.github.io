<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[lingceng]]></title>
  <link href="http://lingceng.github.io/atom.xml" rel="self"/>
  <link href="http://lingceng.github.io/"/>
  <updated>2014-03-17T09:27:09+08:00</updated>
  <id>http://lingceng.github.io/</id>
  <author>
    <name><![CDATA[lingceng]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[basics about minitest]]></title>
    <link href="http://lingceng.github.io/blog/2014/03/17/basics-about-minitest/"/>
    <updated>2014-03-17T07:58:00+08:00</updated>
    <id>http://lingceng.github.io/blog/2014/03/17/basics-about-minitest</id>
    <content type="html"><![CDATA[<ul>
<li>home :: <a href="https://github.com/seattlerb/minitest">https://github.com/seattlerb/minitest</a></li>
<li>rdoc :: <a href="http://docs.seattlerb.org/minitest">http://docs.seattlerb.org/minitest</a></li>
<li>vim  :: <a href="https://github.com/sunaku/vim-ruby-minitest">https://github.com/sunaku/vim-ruby-minitest</a></li>
</ul>


<p>With Ruby 1.9, MiniTest entered standard lib.
MiniTest is pretty small and readable, here is all source file list:</p>

<blockquote><p>lib:
hoe  minitest</p>

<p>lib/hoe:
minitest.rb</p>

<p>lib/minitest:
autorun.rb  benchmark.rb  hell.rb  mock.rb  parallel_each.rb  pride.rb  spec.rb  unit.rb</p></blockquote>

<h3>Assert Methods</h3>

<p>See  Minitest::Assertions doc or unit.rb source</p>

<pre><code>assert assert_equal assert_raises
capture_io
refute refute_empty
...
</code></pre>

<h3>Specs Expections</h3>

<p>See Minitest::Expectations doc or spec.rb source</p>

<pre><code>must_be must_be_close_to
wont_be_empty
...
</code></pre>

<p>Most methods just redirect to assert methods internally.
<strong>describe</strong> method is added to <strong>Kernel</strong> to start the DSL road;
expectations method is added to <strong>Object</strong></p>

<pre><code>class Object 
  include MiniTest::Expectations unless ENV["MT_NO_EXPECTATIONS"]
end
</code></pre>

<h3>Simple Start</h3>

<p>Given that you&rsquo;d like to test the following class:</p>

<pre><code>class Meme
  def i_can_has_cheezburger?
    "OHAI!"
  end

  def will_it_blend?
    "YES!"
  end
end
</code></pre>

<p>Unit tests</p>

<pre><code>require 'minitest/autorun'

class TestMeme &lt; MiniTest::Unit::TestCase
  def setup
    @meme = Meme.new
  end

  def test_that_kitty_can_eat
    assert_equal "OHAI!", @meme.i_can_has_cheezburger?
  end

  def test_that_it_will_not_blend
    refute_match /^no/i, @meme.will_it_blend?
  end

  def test_that_will_be_skipped
    skip "test this later"
  end
end
</code></pre>

<p>Specs</p>

<pre><code># the following have required in autorun 
# no need to repeat !
# require 'minitest/unit'
# require 'minitest/spec'
# require 'minitest/mock'

require 'minitest/autorun'

describe Meme do
  before do
    @meme = Meme.new
  end

  describe "when asked about cheeseburgers" do
    it "must respond positively" do
      @meme.i_can_has_cheezburger?.must_equal "OHAI!"
    end
  end

  describe "when asked about blending possibilities" do
    it "won't say no" do
      @meme.will_it_blend?.wont_match /^no/i
    end
  end
end
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[vim tips]]></title>
    <link href="http://lingceng.github.io/blog/2014/03/14/vim-tips/"/>
    <updated>2014-03-14T22:39:00+08:00</updated>
    <id>http://lingceng.github.io/blog/2014/03/14/vim-tips</id>
    <content type="html"><![CDATA[<p>HERE IS MY <a href="https://gist.github.com/lingceng/6097985">vimrc</a></p>

<h3>wonderful block insert</h3>

<pre><code>in Visual block mode:
|v_b_I|    I    insert the same text in front of all the selected lines
|v_b_A|    A    append the same text after all the selected lines
</code></pre>

<h3>search word under cursor</h3>

<pre><code>* to search current word, n to next, N to previous
</code></pre>

<h3>arround tag</h3>

<pre><code>:help v_a
at  # arround tag
it  # inner tag
</code></pre>

<h3>use mark</h3>

<pre><code>ma # mark a
`a # go to a
`A # go to A between buffers
</code></pre>

<!--more-->


<h3>autocomplete with filesystem</h3>

<pre><code>ctrl-x ctrl-f
</code></pre>

<h3>jump between windows</h3>

<pre><code>:help window

# make the only window
CTRL-W o

# split
CTRL-W s 
# split vertically
CTRL-W v 

# navigate with h j k l
# go to left
CTRL-W h

# resize with &lt; &gt; + -
# add 10 width
CTRL-W 10&gt;
</code></pre>

<h3>show white space</h3>

<pre><code>:set list

# close list
:set nolist
</code></pre>

<h3>buffer change</h3>

<pre><code>CTRL-I
CTRL-O
</code></pre>

<h3>scroll page</h3>

<pre><code>N  CTRL-D   window N lines Downwards (default: 1/2 window)
N  CTRL-U   window N lines Upwards (default: 1/2 window)
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[git get start]]></title>
    <link href="http://lingceng.github.io/blog/2014/03/13/git-get-start/"/>
    <updated>2014-03-13T07:21:00+08:00</updated>
    <id>http://lingceng.github.io/blog/2014/03/13/git-get-start</id>
    <content type="html"><![CDATA[<p>config</p>

<pre><code>git config --global user.name "John Doe"
git config --global user.email "johndoe@example.com"
</code></pre>

<p>how to get help</p>

<pre><code>git config --help
git help config
man git-config
</code></pre>

<p>start up</p>

<pre><code>git init
git add .
git commit -m "Depot Scaffold"

add and commit
git commit -a -m "Depot Scaffold"
</code></pre>

<p>compare with version before last commit and last commit</p>

<pre><code>git diff HEAD^ HEAD
</code></pre>

<p>specify the file path</p>

<pre><code>git diff HEAD^ HEAD app/models/product.rb
</code></pre>

<p>git ammend the last commit</p>

<pre><code>git commit -amend
</code></pre>

<p>powerful edit commit command</p>

<pre><code>git rebase --interactive HEAD^5
</code></pre>

<p>git include delelted files</p>

<pre><code>git add -A
</code></pre>

<p>Creates a remote named &ldquo;origin&rdquo; pointing at your GitHub repository</p>

<pre><code>git remote add origin https://github.com/username/Hello-World.git
</code></pre>

<p>Sends your commits in the &ldquo;master&rdquo; branch to GitHub</p>

<pre><code>git push origin master
</code></pre>

<p>pull down changes</p>

<pre><code>git pull orgin master
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Run Cron Every 5 Hours]]></title>
    <link href="http://lingceng.github.io/blog/2013/11/30/run-cron-every-5-hours/"/>
    <updated>2013-11-30T16:56:00+08:00</updated>
    <id>http://lingceng.github.io/blog/2013/11/30/run-cron-every-5-hours</id>
    <content type="html"><![CDATA[<p>> crontab -e</p>

<figure class='code'><figcaption><span>Run Cron Every 5 Hours </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>    <span class="c"># set the shell</span>
</span><span class='line'>    <span class="nv">SHELL</span><span class="o">=</span>/bin/sh
</span><span class='line'>    <span class="nv">PATH</span><span class="o">=</span>/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
</span><span class='line'>
</span><span class='line'>    <span class="c"># m h dom mon dow usercommand</span>
</span><span class='line'>    0 */5 * * * /path/hello.sh &gt;&gt; /path/hello.log 2&gt;&amp;1
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<h4>Setting the PATH is Always Necessary</h4>

<p><em>Crontab ignores login configuration</em>, which leads to a command not found.
I have tested <em>env</em> command with crontab on my Ubuntu12.04 and I got the following result:</p>

<pre><code>HOME=/home/lingceng
LOGNAME=lingceng
PATH=/usr/bin:/bin
LANG=en_US.UTF-8
SHELL=/bin/sh
PWD=/home/lingceng
</code></pre>

<h4>Not Really Every 5 Hours</h4>

<p>The demo shell script <strong>just runs at 0, 5, 15, 20 o&#8217;clock</strong>, 20 to 0 is just 4 hours.</p>

<h4>Check Cron log</h4>

<p>Cron log default put <em>/var/log/syslog</em>, use following command to monitor it:</p>

<pre><code>tail -f /var/log/syslog | grep CRON
</code></pre>

<h4>Get More Help</h4>

<p>> <a href="http://unixhelp.ed.ac.uk/CGI/man-cgi?crontab+5">man 5 crontab</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello World]]></title>
    <link href="http://lingceng.github.io/blog/2013/10/08/hello-world/"/>
    <updated>2013-10-08T13:41:00+08:00</updated>
    <id>http://lingceng.github.io/blog/2013/10/08/hello-world</id>
    <content type="html"><![CDATA[<p>Hello everyone! Here&rsquo;s my first post on my blog!</p>
]]></content>
  </entry>
  
</feed>
