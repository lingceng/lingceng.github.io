<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Lingceng's Blog]]></title>
  <link href="http://lingceng.github.io/atom.xml" rel="self"/>
  <link href="http://lingceng.github.io/"/>
  <updated>2015-10-10T13:38:25+08:00</updated>
  <id>http://lingceng.github.io/</id>
  <author>
    <name><![CDATA[Lingceng]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Union select statements in Rails]]></title>
    <link href="http://lingceng.github.io/blog/2015/10/10/union-select-statements-in-rails/"/>
    <updated>2015-10-10T11:42:00+08:00</updated>
    <id>http://lingceng.github.io/blog/2015/10/10/union-select-statements-in-rails</id>
    <content type="html"><![CDATA[<p>Here we have a table named <code>user_statuses</code> like following</p>

<pre><code> name    | status
 --------+-------
  'jack' |   1
  'jack' |   2
  'sam'  |   6
  'lucy' |   1
  'toy'  |   2
  'toy'  |   7
  'jack' |   7
</code></pre>

<p>I want to collect the status with follwing rule:</p>

<ul>
<li>Keep all [1-2] statuses</li>
<li>Ignore other status above 2 if one has any [1-2] status</li>
<li>keep only one ohter status above 2 if one do not has any [1-2] status</li>
</ul>


<p>So the result should like following:</p>

<pre><code> name    | status
 --------+-------
  'jack' |   1
  'jack' |   2
  'sam'  |   6
  'lucy' |   1
  'toy'  |   2
</code></pre>

<p>The real life case is more complicated. I want to achieve this rule in SQL.
As a result I can do some group or something else later.</p>

<p>After some searches, I found out <code>union all</code> can do the job.
But call <code>union</code> on ActiveRelation returns a Arel::Nodes::Union but ActiveRelation
Gem <a href="https://github.com/brianhempel/active_record_union">active record union</a> get a
good solution.</p>

<p>Here&rsquo;s my demo sulution:</p>

<pre><code>  statuses = [1, 2]
  left = UserStatus.where(status: statuses).select(:name, :status)
  right = UserStatus.select(:name, 'MIN(status) as status').
    group(:name).
    having('MIN(status) &gt; 2')
  query = left.union_all(right)
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[When Rails InvalidAuthenticityToken Happens]]></title>
    <link href="http://lingceng.github.io/blog/2014/11/26/when-rails-invalidauthenticitytoken-happens/"/>
    <updated>2014-11-26T16:31:00+08:00</updated>
    <id>http://lingceng.github.io/blog/2014/11/26/when-rails-invalidauthenticitytoken-happens</id>
    <content type="html"><![CDATA[<p><code>InvalidAuthenticityToken</code> happens if you enabled <code>protect_from_forgery</code>
but does not handle token well.</p>

<p>In <code>appliction_controller.rb</code></p>

<pre><code>protect_from_forgery
</code></pre>

<p>This will automatically include a security token in all forms and Ajax
requests generated by Rails. If the security token doesn&rsquo;t match what was
expected, the session will be reset.</p>

<p>In page <code>&lt;head&gt;</code></p>

<pre><code>&lt;%= csrf_meta_tags %&gt;
</code></pre>

<p>Is basically fulfilling the same thing as hidden form fields but is there to give
javascript requests that aren&rsquo;t tied to a form an easy way of getting the token.</p>

<p>If you use the jquery-ujs library the content of that meta tag is automatically
added (as a request header) to any ajax requests made.</p>

<p><code>jquery-ujs</code> add a ajax filter to append token to parameter</p>

<pre><code>// ajaxPrefilter is a jquery method
$.ajaxPrefilter(function(options, originalOptions, xhr) {
  if ( !options.crossDomain ) { rails.CSRFProtection(xhr); }
});
</code></pre>

<p>Note: Only HTML and JavaScript requests are checked.
See more about <code>ActionController::RequestForgeryProtection</code> in rails API.</p>

<h3>Conclusion</h3>

<p>Always import <code>jquery-ujs</code> when enabled <code>protect_from_forgery</code>
And put <code>&lt;%= csrf_meta_tags %&gt;</code> in page head.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails Time Best Practice]]></title>
    <link href="http://lingceng.github.io/blog/2014/11/22/rails-time-best-practice/"/>
    <updated>2014-11-22T18:38:00+08:00</updated>
    <id>http://lingceng.github.io/blog/2014/11/22/rails-time-best-practice</id>
    <content type="html"><![CDATA[<h4>Setup</h4>

<p>Let&rsquo;s create a demo table and do some configurations in a rails project.
Then we&rsquo;ll do some tests about time in <code>rails console</code>.</p>

<pre><code>class CreateHellos &lt; ActiveRecord::Migration
  def change
    create_table :hellos do |t|
      t.timestamps
    end
  end
end
</code></pre>

<p>Add following to <code>config/application.rb</code></p>

<pre><code>Rails.application.config.active_record.default_timezone = :local
Rails.application.config.time_zone = 'Beijing'
</code></pre>

<p><code>config.time_zone</code> sets the default time zone for the application
and enables time zone awareness for Active Record.</p>

<p><code>config.active_record.default_timezone</code> determines whether to use Time.local
 (if set to :local) or Time.utc (if set to :utc) when pulling dates and times
from the database.  The default is :utc.</p>

<h4><code>to_s(:db)</code> is error-prone</h4>

<p>Run following codes in rails console.
Here CST stands for (China Standard Time) which is zone name for Beijing.</p>

<pre><code>l = FinanceItem.create
#=&gt; #&lt;FinanceItem id: 1, created_at: "2014-11-22 03:00:32", updated_at: "2014-11-22 03:00:32" &gt;
l.created_at
#=&gt; Sat, 22 Nov 2014 11:00:32 CST +08:00
</code></pre>

<p>The timezone offset is <strong>+08:00</strong> because I set <code>config.time_zone = 'Beijing'</code></p>

<pre><code>l.created_at.class
#=&gt; ActiveSupport::TimeWithZone
</code></pre>

<p>Rails use ActiveSupport::TimeWithZone for datetime field.</p>

<pre><code>l.created_at.strftime("%Y-%m-%d %H:%M%S")
#=&gt; "2014-11-22 11:00:32"
l.created_at.to_s(:db)
#=&gt; "2014-11-22 03:00:32"
</code></pre>

<p>We can see, two date strings are different.
Because <code>to_s(:db)</code> always output time string in UTC.
<code>strftime</code> or <code>to_s</code> ouptut time string with configured time zone.</p>

<p>Here is the <code>TimewithZone#to_s(format)</code> source:</p>

<pre><code>:default - default value, mimics Ruby 1.9 Time#to_s format.
:db - format outputs time in UTC :db time. See Time#to_formatted_s(:db).
Any key in Time::DATE_FORMATS can be used. See active_support/core_ext/time/conversions.rb.
# File activesupport/lib/active_support/time_with_zone.rb, line 193
def to_s(format = :default)
  if format == :db
    utc.to_s(format)
  elsif formatter = ::Time::DATE_FORMATS[format]
    formatter.respond_to?(:call) ? formatter.call(self).to_s : strftime(formatter)
  else
    "#{time.strftime("%Y-%m-%d %H:%M:%S")} #{formatted_offset(false, 'UTC')}" # mimicking Ruby 1.9 Time#to_s format
  end
end
</code></pre>

<p>How about <code>Time#to_s(:db)</code> and <code>Time#strftime("%Y-%m-%d %H:%M:%S")</code>?
Here zone name is CST because my system local is &lsquo;Beijing&rsquo;.
It&rsquo;s different with TimeWithZone which get zone from project configurations <code>config.time_zone</code>.</p>

<pre><code>a = Time.now
=&gt; 2015-03-12 16:56:21
a.zone
=&gt; "CST"
a.to_s(:db)
=&gt; "2015-03-12 16:56:21"
a.strftime("%Y-%m-%d %H:%M:%S")
=&gt; "2015-03-12 16:56:21"
</code></pre>

<p><code>Time#to_s(:db)</code> and <code>Time#strftime("%Y-%m-%d %H:%M:%S")</code> output the same.
We can find out that <code>Time#to_s(:db)</code> is actually called Time#strftime(&lsquo;%Y-%m-%d %H:%M:%S&rsquo;) from source</p>

<p>As we can see, <code>to_s(:db)</code> is NOT consistent between Time and TimeWithZone.
TimeWithZone#to_s(:db) will generate time string of UTC.
Time#to_s(:db) will return time string of configured local.</p>

<p>So calling <code>to_s(:db)</code> is always error-prone. Do not use it unless you know what you are doing.
And you&rsquo;d better not use Time and TimeWithZone interchangeably.</p>

<h4>Time.zone.parse get time with timezone</h4>

<p>Let&rsquo;s try following codes.</p>

<pre><code>a = DateTime.parse('2014-11-22 12:35:05')
#=&gt; Sat, 22 Nov 2014 12:35:05 +0000
a.to_s(:rfc822)
#=&gt; "Sat, 22 Nov 2014 12:35:05 +0000"
a.in_time_zone.to_s(:rfc822)
#=&gt; "Sat, 22 Nov 2014 20:35:05 +0800"

b = Time.zone.parse('2014-11-22 12:35:05')
#=&gt; 2014-11-22 12:35:05
b.to_s(:rfc822)
#=&gt; "Sat, 22 Nov 2014 12:35:05 +0800"
</code></pre>

<p>Notice that <code>Time.zone.parse</code> has <code>+0800</code> timezone offset but <code>DateTime.parse</code>
has &lsquo;+0000&rsquo; timezone offset.</p>

<p>So <code>Time.zone.parse</code> may be better for you.</p>

<h3>Time.now vs Time.current</h3>

<p>Let&rsquo;s see the definition of <code>Time.current</code></p>

<pre><code># File activesupport/lib/active_support/core_ext/time/calculations.rb, line 29
def current
  ::Time.zone ? ::Time.zone.now : ::Time.now
end
</code></pre>

<p>Time.now uses the <strong>system time zone</strong> because it&rsquo;s is part of the Ruby standard library.
Time.zone.now will set zone with <code>config.time_zone</code>.</p>

<p>Using <code>Time.now</code> make troubles when your system time zone is different with
<code>config.time_zone</code></p>

<h3>Best practice</h3>

<p>Set the following config.</p>

<pre><code>config.active_record.default_timezone = :local
config.time_zone = 'YourLocalName'
</code></pre>

<p>Use <code>Time.zone.parse</code> and do <strong>NOT</strong> use <code>DateTime.parse</code>.</p>

<p>Use <code>Time.zone.now</code> or <code>Time.current</code> and do <strong>NOT</strong> use <code>Time.now</code>.</p>

<p>Thus we can keep all time class to TimeWithZone and get consistent behavior.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Turbolink Best Practice]]></title>
    <link href="http://lingceng.github.io/blog/2014/10/16/turbolink-best-practice/"/>
    <updated>2014-10-16T12:12:00+08:00</updated>
    <id>http://lingceng.github.io/blog/2014/10/16/turbolink-best-practice</id>
    <content type="html"><![CDATA[<h2>What does Turbolink do?</h2>

<p><a href="https://github.com/rails/turbolinks">Turbolink</a> makes browser to only replace
page&rsquo;s <code>&lt;body&gt;</code> and <code>&lt;title&gt;</code> to simulate page jumping when click a link.</p>

<p>It&rsquo;s fast because no need to recompile the JavaScript or CSS.</p>

<p>As you can see, we must keep stuffs in <code>&lt;head&gt;</code> the same between pages when jumping with Turbolink.  In other words, Things will go wrong if the pages have
different content in <code>&lt;head&gt;</code>.</p>

<h4>Turbolink has other features to make it fast.</h4>

<p>Turbolink uses client cache pages.</p>

<pre><code># View current page cache size
Turbolinks.pagesCached();
# Set the cache size
Turbolinks.pagesCached(20);
</code></pre>

<p>Turbolink uses transition cache.
Transition will immediately display the cached copy of page and then replace
with remote returned one.</p>

<pre><code># enable transition cache
Turbolinks.enableTransitionCache();
</code></pre>

<p>Browser native process bar will not work when using Turbolink.
So Turbolink provide a JavaScript-and-CSS-based one.</p>

<pre><code>Turbolinks.enableProgressBar();
</code></pre>

<h2>What&rsquo;s the best practice?</h2>

<ul>
<li><strong> Never change <code>&lt;HEAD&gt;</code> content except <code>title</code> </strong></li>
<li><strong> Put all JavaScript and CSS in <code>&lt;HEAD&gt;</code> </strong></li>
<li><strong> Use <code>jquery.turbolink</code> to fix <code>DOMContentLoaded</code> or <code>jQuery.ready()</code> in jQuery. </strong></li>
</ul>


<h2>You want some JavaScript only included in some page?</h2>

<p>Mark to <code>&lt;body&gt;</code> when need specific page logic, trigger it according to mark.
I want javascript only run in topics pages:</p>

<pre><code>// In app/views/layouts/application.html.erb
&lt;body data-controller-name="&lt;%= controller_name %&gt;"&gt;

// In topics.coffee
window.Topics =
  replies_per_page: 50
  init : () -&gt;
    console.log "hello"

$(document).ready -&gt;
  if $('body').data('controller-name') in ['topics']
    Topics.init()

// Add topics to appliction.js
//= require topics
</code></pre>

<h2>What will happen when add JavaScript in page body?</h2>

<p>You should not add JavaScript to <code>&lt;body&gt;</code>, they will be re-evaluated.
Especially when doing event bind, it will cause event binding multiple times.</p>

<p>You can add <code>data-turbolinks-eval=false</code> to prevent re-evaluating if you did want it.</p>

<pre><code>&lt;script type="text/javascript" data-turbolinks-eval=false&gt;
  console.log("I'm only run once on the initial page load");
&lt;/script&gt;
</code></pre>

<h2>What will happen when I changed head content?</h2>

<p>It depends on how you change it.</p>

<p>If you add some <code>&lt;script type="text/javascript"&gt;</code> tag, eg.</p>

<pre><code>// On page B
&lt;script type="text/javascript"&gt;
  console.log('hello')
&lt;/script&gt;
</code></pre>

<p>When you click a link on page A and jump to page B, the &lsquo;hello&rsquo; will <strong>not</strong> printed.
The script tag will be ignored.</p>

<p>It&rsquo;s the same when you make it a <code>src</code> link.</p>

<pre><code>// On page B
&lt;script type="text/javascript" src='hello.js'&gt; &lt;/script&gt;
</code></pre>

<p>You add a <code>data-turbolinks-track</code> tag to make it work. But it has drawbacks.</p>

<pre><code>&lt;script type="text/javascript" src="http://lingceng.github.io/hello.js" data-turbolinks-track&gt;&lt;/script&gt;
</code></pre>

<p>When this case, &lsquo;hello&rsquo; will be printed,
every things seems fine except <strong>slow page load</strong>.</p>

<p>You&rsquo;ll technically be requesting the same page twice.
Once through Turbolinks to detect that the assets changed,
and then again do a full redirect to that page.</p>

<p>You should always add <code>data-turbolinks-track</code> to JavaScript and CSS links.
This will trigger full page load when your assets changed.</p>

<p>When page A and page B have different <code>track targets</code>,
every switch between them will cause <code>double load</code>.</p>

<p>See the <a href="https://github.com/rails/turbolinks/blob/master/lib%2Fassets%2Fjavascripts%2Fturbolinks.js.coffee#L231">code</a>
to know the details</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">extractTrackAssets = </span><span class="nf">(doc) -&gt;</span>
</span><span class='line'>  <span class="k">for</span> <span class="nx">node</span> <span class="k">in</span> <span class="nx">doc</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s">&#39;head&#39;</span><span class="p">).</span><span class="nx">childNodes</span> <span class="k">when</span> <span class="nx">node</span><span class="p">.</span><span class="nx">getAttribute</span><span class="o">?</span><span class="p">(</span><span class="s">&#39;data-turbolinks-track&#39;</span><span class="p">)</span><span class="o">?</span>
</span><span class='line'>    <span class="nx">node</span><span class="p">.</span><span class="nx">getAttribute</span><span class="p">(</span><span class="s">&#39;src&#39;</span><span class="p">)</span> <span class="o">or</span> <span class="nx">node</span><span class="p">.</span><span class="nx">getAttribute</span><span class="p">(</span><span class="s">&#39;href&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nv">assetsChanged = </span><span class="nf">(doc) -&gt;</span>
</span><span class='line'>  <span class="nx">loadedAssets</span> <span class="o">||=</span> <span class="nx">extractTrackAssets</span> <span class="nb">document</span>
</span><span class='line'>  <span class="nv">fetchedAssets  = </span><span class="nx">extractTrackAssets</span> <span class="nx">doc</span>
</span><span class='line'>  <span class="nx">fetchedAssets</span><span class="p">.</span><span class="nx">length</span> <span class="o">isnt</span> <span class="nx">loadedAssets</span><span class="p">.</span><span class="nx">length</span> <span class="o">or</span> <span class="nx">intersection</span><span class="p">(</span><span class="nx">fetchedAssets</span><span class="p">,</span> <span class="nx">loadedAssets</span><span class="p">).</span><span class="nx">length</span> <span class="o">isnt</span> <span class="nx">loadedAssets</span><span class="p">.</span><span class="nx">length</span>
</span></code></pre></td></tr></table></div></figure>


<p>One last rescue is to prevent turbolink jump by add <code>data-no-turbolink</code> tag.
And then you will not benefit from turbolink speed boost.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;/&quot;</span><span class="nt">&gt;</span>Home (via Turbolinks)<span class="nt">&lt;/a&gt;</span>
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;some-div&quot;</span> <span class="na">data-no-turbolink</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;/&quot;</span><span class="nt">&gt;</span>Home (without Turbolinks)<span class="nt">&lt;/a&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jQuery Source Structure Tip]]></title>
    <link href="http://lingceng.github.io/blog/2014/03/26/jquery-source-structure-tip/"/>
    <updated>2014-03-26T09:12:00+08:00</updated>
    <id>http://lingceng.github.io/blog/2014/03/26/jquery-source-structure-tip</id>
    <content type="html"><![CDATA[<p>I&rsquo;m puzzled when I first see the jQuery source code.
I finaly find a clue after several attempts.</p>

<p>Put aside other modules, we can find out that jQuery has the ordinary JS class structrue.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">jQuery</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">jQuery</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>It seems not that same with how we use jQuery. secret is the aliases.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// we can use the dollar sign to call the jQuery function</span>
</span><span class='line'><span class="nx">$</span> <span class="o">=</span> <span class="nx">jQuery</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// we can use the `jQuery.fn.newFeature = function() {}` to extend the jQuery instance function</span>
</span><span class='line'><span class="c1">// Why we can add fn key to jQuery?</span>
</span><span class='line'><span class="c1">// Answer is jQuery is a function and function is a object too. So we can add</span>
</span><span class='line'><span class="c1">// properties to function</span>
</span><span class='line'><span class="nx">jQuery</span><span class="p">.</span><span class="nx">fn</span> <span class="o">=</span> <span class="nx">jQuery</span><span class="p">.</span><span class="nx">prototype</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>But when <code>$("#someid")</code> always return a jQuery instance, where the <code>new</code> keyword?</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">jQuery</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// jQuery.prototype.init is the actually creator function</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">new</span> <span class="nx">jQuery</span><span class="p">.</span><span class="nx">fn</span><span class="p">.</span><span class="nx">init</span><span class="p">(</span> <span class="nx">selector</span><span class="p">,</span> <span class="nx">context</span> <span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//  mount prototype on jQuery to jQuery.fn.init</span>
</span><span class='line'><span class="nx">jQuery</span><span class="p">.</span><span class="nx">fn</span><span class="p">.</span><span class="nx">init</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="nx">jquery</span><span class="p">.</span><span class="nx">fn</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s see the complete struture now.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// utils</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// class structure</span>
</span><span class='line'><span class="nx">jQuery</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">new</span> <span class="nx">jQuery</span><span class="p">.</span><span class="nx">fn</span><span class="p">.</span><span class="nx">init</span><span class="p">(</span> <span class="nx">selector</span><span class="p">,</span> <span class="nx">context</span> <span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">jQuery</span><span class="p">.</span><span class="nx">fn</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>   <span class="nx">init</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">selector</span><span class="p">,</span> <span class="nx">context</span><span class="p">)</span> <span class="p">{}</span>
</span><span class='line'>   <span class="c1">// other core instance methods</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">jQuery</span><span class="p">.</span><span class="nx">fn</span> <span class="o">=</span> <span class="nx">jQuery</span><span class="p">.</span><span class="nx">prototype</span><span class="p">;</span>
</span><span class='line'><span class="nx">jQuery</span><span class="p">.</span><span class="nx">fn</span><span class="p">.</span><span class="nx">init</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="nx">jquery</span><span class="p">.</span><span class="nx">fn</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// instance methods extend</span>
</span><span class='line'><span class="c1">// or use this style: jQuery.fn.hello = funtion() {}</span>
</span><span class='line'><span class="nx">jQuery</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="nx">jQuery</span><span class="p">.</span><span class="nx">fn</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>   <span class="c1">// ...</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// class methods extend</span>
</span><span class='line'><span class="c1">// or use this style: jQuery.hello = funtion() {}</span>
</span><span class='line'><span class="c1">// maybe some utils</span>
</span><span class='line'><span class="nx">jQuery</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="nx">jQuery</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">isFunction</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span> <span class="nx">obj</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">jQuery</span><span class="p">.</span><span class="nx">type</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span> <span class="o">===</span> <span class="s2">&quot;function&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="c1">// ...</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// module export or AMD</span>
</span><span class='line'><span class="nb">window</span><span class="p">.</span><span class="nx">$</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">jQuery</span> <span class="o">=</span> <span class="nx">jQuery</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[minitest mock and stud]]></title>
    <link href="http://lingceng.github.io/blog/2014/03/18/minitest-mock-and-stud/"/>
    <updated>2014-03-18T08:28:00+08:00</updated>
    <id>http://lingceng.github.io/blog/2014/03/18/minitest-mock-and-stud</id>
    <content type="html"><![CDATA[<h3>capture io</h3>

<p>Use <code>capture_io</code> to test output.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">out</span><span class="p">,</span> <span class="n">err</span> <span class="o">=</span> <span class="n">capture_io</span> <span class="k">do</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;Some info&quot;</span>
</span><span class='line'>  <span class="nb">warn</span> <span class="s2">&quot;You did a bad thing&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">assert_match</span> <span class="sr">%r%info%</span><span class="p">,</span> <span class="n">out</span>
</span><span class='line'><span class="n">assert_match</span> <span class="sr">%r%bad%</span><span class="p">,</span> <span class="n">err</span>
</span></code></pre></td></tr></table></div></figure>


<h3>mock</h3>

<p><code>capture_io</code> uses StringIO to wrap $stdout and $stderr.
How to simulate user input or socket talks? Mock may do the job.</p>

<figure class='code'><figcaption><span>stupidc.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Stupidc</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">input</span><span class="o">=</span><span class="no">STDIN</span><span class="p">,</span> <span class="n">output</span><span class="o">=</span><span class="no">STDOUT</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@input</span> <span class="o">=</span> <span class="n">input</span>
</span><span class='line'>    <span class="vi">@output</span> <span class="o">=</span> <span class="n">output</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">say_hello</span><span class="p">()</span>
</span><span class='line'>    <span class="vi">@output</span><span class="o">.</span><span class="n">puts</span> <span class="s1">&#39;hello&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>stupidc_spec.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;minitest/autorun&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">describe</span> <span class="no">Stupidc</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">before</span> <span class="k">do</span>
</span><span class='line'>    <span class="vi">@input</span> <span class="o">=</span> <span class="ss">MiniTest</span><span class="p">:</span><span class="ss">:Mock</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>    <span class="vi">@output</span> <span class="o">=</span> <span class="ss">MiniTest</span><span class="p">:</span><span class="ss">:Mock</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>
</span><span class='line'>    <span class="vi">@stupidc</span> <span class="o">=</span> <span class="no">Stupidc</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="vi">@input</span><span class="p">,</span> <span class="vi">@output</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="n">it</span> <span class="s2">&quot;should copy file to source when file is target&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="vi">@output</span><span class="o">.</span><span class="n">expect</span> <span class="ss">:puts</span><span class="p">,</span> <span class="kp">nil</span><span class="p">,</span> <span class="o">[</span><span class="s1">&#39;hello&#39;</span><span class="o">]</span>
</span><span class='line'>    <span class="vi">@stupidc</span><span class="o">.</span><span class="n">say_hello</span><span class="p">()</span>
</span><span class='line'>    <span class="vi">@output</span><span class="o">.</span><span class="n">verify</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>stub</h3>

<p>Stub has similar function with mock, but no need to inject a property.
Stub can simulate module methods or instance methods (They are the same in ruby, all class is the instance of Class) with ease.
see <a href="https://github.com/seattlerb/minitest/blob/master/test/minitest/test_minitest_mock.rb">test</a></p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">test_stub_yield_self</span>
</span><span class='line'>  <span class="n">obj</span> <span class="o">=</span> <span class="s2">&quot;foo&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">val</span> <span class="o">=</span> <span class="n">obj</span><span class="o">.</span><span class="n">stub</span> <span class="ss">:to_s</span><span class="p">,</span> <span class="s2">&quot;bar&quot;</span> <span class="k">do</span> <span class="o">|</span><span class="n">s</span><span class="o">|</span>
</span><span class='line'>    <span class="n">s</span><span class="o">.</span><span class="n">to_s</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="vi">@tc</span><span class="o">.</span><span class="n">assert_equal</span> <span class="s2">&quot;bar&quot;</span><span class="p">,</span> <span class="n">val</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[basics about minitest]]></title>
    <link href="http://lingceng.github.io/blog/2014/03/17/basics-about-minitest/"/>
    <updated>2014-03-17T07:58:00+08:00</updated>
    <id>http://lingceng.github.io/blog/2014/03/17/basics-about-minitest</id>
    <content type="html"><![CDATA[<ul>
<li>home :: <a href="https://github.com/seattlerb/minitest">https://github.com/seattlerb/minitest</a></li>
<li>rdoc :: <a href="http://docs.seattlerb.org/minitest">http://docs.seattlerb.org/minitest</a></li>
<li>vim  :: <a href="https://github.com/sunaku/vim-ruby-minitest">https://github.com/sunaku/vim-ruby-minitest</a></li>
</ul>


<p>With Ruby 1.9, MiniTest entered standard lib.
MiniTest is pretty small and readable, here is all source file list:</p>

<blockquote><p>lib:
hoe  minitest</p>

<p>lib/hoe:
minitest.rb</p>

<p>lib/minitest:
autorun.rb  benchmark.rb  hell.rb  mock.rb  parallel_each.rb  pride.rb  spec.rb  unit.rb</p></blockquote>

<h3>Assert Methods</h3>

<p>See  Minitest::Assertions doc or unit.rb source</p>

<pre><code>assert assert_equal assert_raises
capture_io
refute refute_empty
...
</code></pre>

<h3>Specs Expections</h3>

<p>See Minitest::Expectations doc or spec.rb source</p>

<pre><code>must_be must_be_close_to
wont_be_empty
...
</code></pre>

<p>Most methods just redirect to assert methods internally.
<strong>describe</strong> method is added to <strong>Kernel</strong> to start the DSL road;
expectations method is added to <strong>Object</strong></p>

<pre><code>class Object
  include MiniTest::Expectations unless ENV["MT_NO_EXPECTATIONS"]
end
</code></pre>

<h3>Simple Start</h3>

<p>Given that you&rsquo;d like to test the following class:</p>

<pre><code>class Meme
  def i_can_has_cheezburger?
    "OHAI!"
  end

  def will_it_blend?
    "YES!"
  end
end
</code></pre>

<p>Unit tests</p>

<pre><code>require 'minitest/autorun'

class TestMeme &lt; MiniTest::Unit::TestCase
  def setup
    @meme = Meme.new
  end

  def test_that_kitty_can_eat
    assert_equal "OHAI!", @meme.i_can_has_cheezburger?
  end

  def test_that_it_will_not_blend
    refute_match /^no/i, @meme.will_it_blend?
  end

  def test_that_will_be_skipped
    skip "test this later"
  end
end
</code></pre>

<p>Specs</p>

<pre><code># the following have required in autorun
# no need to repeat !
# require 'minitest/unit'
# require 'minitest/spec'
# require 'minitest/mock'

require 'minitest/autorun'

describe Meme do
  before do
    @meme = Meme.new
  end

  describe "when asked about cheeseburgers" do
    it "must respond positively" do
      @meme.i_can_has_cheezburger?.must_equal "OHAI!"
    end
  end

  describe "when asked about blending possibilities" do
    it "won't say no" do
      @meme.will_it_blend?.wont_match /^no/i
    end
  end
end
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[vim tips]]></title>
    <link href="http://lingceng.github.io/blog/2014/03/14/vim-tips/"/>
    <updated>2014-03-14T22:39:00+08:00</updated>
    <id>http://lingceng.github.io/blog/2014/03/14/vim-tips</id>
    <content type="html"><![CDATA[<p>HERE IS MY <a href="https://gist.github.com/lingceng/6097985">vimrc</a></p>

<h3>wonderful block insert</h3>

<pre><code>in Visual block mode:
|v_b_I|    I    insert the same text in front of all the selected lines
|v_b_A|    A    append the same text after all the selected lines
</code></pre>

<h3>search word under cursor</h3>

<pre><code>* to search current word, n to next, N to previous
</code></pre>

<h3>arround tag</h3>

<pre><code>:help v_a
at  # arround tag
it  # inner tag
</code></pre>

<h3>use mark</h3>

<pre><code>ma # mark a
`a # go to a
`A # go to A between buffers
</code></pre>

<!--more-->


<h3>autocomplete with filesystem</h3>

<pre><code>ctrl-x ctrl-f
</code></pre>

<h3>jump between windows</h3>

<pre><code>:help window

# make the only window
CTRL-W o

# split
CTRL-W s
# split vertically
CTRL-W v

# navigate with h j k l
# go to left
CTRL-W h

# resize with &lt; &gt; + -
# add 10 width
CTRL-W 10&gt;
</code></pre>

<h3>show white space</h3>

<pre><code>:set list

# close list
:set nolist
</code></pre>

<h3>buffer change</h3>

<pre><code>CTRL-I
CTRL-O
</code></pre>

<h3>scroll page</h3>

<pre><code>N  CTRL-D   window N lines Downwards (default: 1/2 window)
N  CTRL-U   window N lines Upwards (default: 1/2 window)
</code></pre>

<h3>set highlight when search</h3>

<pre><code>set hlsearch
set nohlsearch
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[git get start]]></title>
    <link href="http://lingceng.github.io/blog/2014/03/13/git-get-start/"/>
    <updated>2014-03-13T07:21:00+08:00</updated>
    <id>http://lingceng.github.io/blog/2014/03/13/git-get-start</id>
    <content type="html"><![CDATA[<p>config</p>

<pre><code>git config --global user.name "John Doe"
git config --global user.email "johndoe@example.com"
</code></pre>

<p>how to get help</p>

<pre><code>git config --help
git help config
man git-config
</code></pre>

<p>start up</p>

<pre><code>git init
git add .
git commit -m "Depot Scaffold"

add and commit
git commit -a -m "Depot Scaffold"
</code></pre>

<p>compare with version before last commit and last commit</p>

<pre><code>git diff HEAD^ HEAD

# show diff stat
git diff --stat

# show the tree-like view
git log --graph --oneline --all
</code></pre>

<p>specify the file path</p>

<pre><code>git diff HEAD^ HEAD app/models/product.rb
</code></pre>

<p>git ammend the last commit</p>

<pre><code>git commit -amend
</code></pre>

<p>powerful edit commit command</p>

<pre><code>git rebase --interactive HEAD^5
</code></pre>

<p>git include delelted files</p>

<pre><code>git add -A
</code></pre>

<p>Creates a remote named &ldquo;origin&rdquo; pointing at your GitHub repository</p>

<pre><code>git remote add origin https://github.com/username/Hello-World.git
</code></pre>

<p>Sends your commits in the &ldquo;master&rdquo; branch to GitHub</p>

<pre><code>git push origin master
</code></pre>

<p>pull down changes</p>

<pre><code>git pull orgin master
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Run Cron Every 5 Hours]]></title>
    <link href="http://lingceng.github.io/blog/2013/11/30/run-cron-every-5-hours/"/>
    <updated>2013-11-30T16:56:00+08:00</updated>
    <id>http://lingceng.github.io/blog/2013/11/30/run-cron-every-5-hours</id>
    <content type="html"><![CDATA[<p>> crontab -e</p>

<figure class='code'><figcaption><span>Run Cron Every 5 Hours </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c"># set the shell</span>
</span><span class='line'><span class="nv">SHELL</span><span class="o">=</span>/bin/sh
</span><span class='line'><span class="nv">PATH</span><span class="o">=</span>/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
</span><span class='line'>
</span><span class='line'><span class="c"># m h dom mon dow usercommand</span>
</span><span class='line'>0 */5 * * * /path/hello.sh &gt;&gt; /path/hello.log 2&gt;&amp;1
</span></code></pre></td></tr></table></div></figure>


<h4>Setting the PATH is Always Necessary</h4>

<p><em>Crontab ignores login configuration</em>, which leads to a command not found.
I have tested <em>env</em> command with crontab on my Ubuntu12.04 and I got the following result:</p>

<pre><code>HOME=/home/lingceng
LOGNAME=lingceng
PATH=/usr/bin:/bin
LANG=en_US.UTF-8
SHELL=/bin/sh
PWD=/home/lingceng
</code></pre>

<h4>Not Really Every 5 Hours</h4>

<p>The demo shell script <strong>just runs at 0, 5, 15, 20 o&#8217;clock</strong>, 20 to 0 is just 4 hours.</p>

<h4>Check Cron log</h4>

<p>Cron log default put <em>/var/log/syslog</em>, use following command to monitor it:</p>

<pre><code>tail -f /var/log/syslog | grep CRON
</code></pre>

<h4>Get More Help</h4>

<p>> <a href="http://unixhelp.ed.ac.uk/CGI/man-cgi?crontab+5">man 5 crontab</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello World]]></title>
    <link href="http://lingceng.github.io/blog/2013/10/08/hello-world/"/>
    <updated>2013-10-08T13:41:00+08:00</updated>
    <id>http://lingceng.github.io/blog/2013/10/08/hello-world</id>
    <content type="html"><![CDATA[<p>Hello everyone! Here&rsquo;s my first post on my blog!</p>
]]></content>
  </entry>
  
</feed>
