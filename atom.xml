<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Lingceng's Blog]]></title>
  <link href="http://lingceng.github.io/atom.xml" rel="self"/>
  <link href="http://lingceng.github.io/"/>
  <updated>2016-01-19T13:08:49+08:00</updated>
  <id>http://lingceng.github.io/</id>
  <author>
    <name><![CDATA[Lingceng]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Save Your Time: Install ruby2.3.0 with RVM]]></title>
    <link href="http://lingceng.github.io/blog/2016/01/19/save-your-time-install-ruby2-dot-3-0-with-rvm/"/>
    <updated>2016-01-19T12:24:00+08:00</updated>
    <id>http://lingceng.github.io/blog/2016/01/19/save-your-time-install-ruby2-dot-3-0-with-rvm</id>
    <content type="html"><![CDATA[<p>Note that:  <strong>ruby-2.3.0</strong> is not present now when run <code>rvm list known</code> command in rvm 1.26.11.<br/>
It may be available in next rvm version.
See <a href="https://github.com/rvm/rvm/blob/1.26.11/config/known#L11">here</a> for more details.</p>

<p>But you can just run the following directly.</p>

<pre><code>rvm install ruby-2.3.0
</code></pre>

<p>And set 2.3.0 as default ruby version</p>

<pre><code>rvm --default use 2.3.0
</code></pre>

<p>Copy gems from older version</p>

<pre><code>rvm gemset copy 2.1.5 2.3.0
</code></pre>

<p>Get the ruby version and celebrate!</p>

<pre><code>ruby -v
# ruby 2.3.0p0 (2015-12-25 revision 53290) [x86_64-darwin15]
</code></pre>

<p>Try new features in irb</p>

<pre><code>puts 'hi'&amp;.upcase

h = { a: 1, b: 2, c: 3, d: 4 }
[ :a, :c, :d, :b ].map(&amp;h)
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dive Into The Source Code: Find More Information Besides The Doc]]></title>
    <link href="http://lingceng.github.io/blog/2016/01/18/dive-into-the-source-code-find-more-information-besides-the-doc/"/>
    <updated>2016-01-18T21:27:00+08:00</updated>
    <id>http://lingceng.github.io/blog/2016/01/18/dive-into-the-source-code-find-more-information-besides-the-doc</id>
    <content type="html"><![CDATA[<p>We can use <strong>pry</strong> and  <strong>pry-byebug</strong> gem to help us dive into the source code.</p>

<h3>Let&rsquo;s see an example about <code>to_json</code> vs <code>as_json</code></h3>

<p>I found there&rsquo;s a <code>to_json</code> and <code>as_json</code> method for active record query result.
<code>to_json</code> returns String of json.
<code>as_json</code> returns a hash representing the model.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&gt;</span> <span class="no">Order</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="ss">number</span><span class="p">:</span> <span class="s2">&quot;201504211405490&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">to_json</span>
</span><span class='line'><span class="c1"># =&gt; &quot;[{\&quot;production_status\&quot;:\&quot;idle\&quot;,\&quot;id\&quot;:11,\&quot;number\&quot;:\&quot;201504211405490\&quot;}]&quot;</span>
</span><span class='line'><span class="o">&gt;</span> <span class="no">Order</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="ss">number</span><span class="p">:</span> <span class="s2">&quot;201504211405490&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">to_json</span><span class="o">.</span><span class="n">class</span>
</span><span class='line'><span class="c1"># =&gt; String</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;</span> <span class="no">Order</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="ss">number</span><span class="p">:</span> <span class="s2">&quot;201504211405490&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">as_json</span>
</span><span class='line'><span class="c1"># =&gt; [{&quot;production_status&quot;=&gt;&quot;idle&quot;, &quot;id&quot;=&gt;11, &quot;number&quot;=&gt;&quot;201504211405490&quot;}]</span>
</span><span class='line'><span class="o">&gt;</span> <span class="no">Order</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="ss">number</span><span class="p">:</span> <span class="s2">&quot;201504211405490&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">as_json</span><span class="o">.</span><span class="n">class</span>
</span><span class='line'><span class="c1"># =&gt; Hash</span>
</span></code></pre></td></tr></table></div></figure>


<p>I find that <code>as_json</code> can accepts some optons.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&gt;</span> <span class="no">Order</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="ss">number</span><span class="p">:</span> <span class="s2">&quot;201504211405490&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">as_json</span><span class="p">(</span><span class="ss">only</span><span class="p">:</span> <span class="ss">:number</span><span class="p">)</span>
</span><span class='line'><span class="c1"># =&gt; [{&quot;number&quot;=&gt;&quot;201504211405490&quot;}]</span>
</span></code></pre></td></tr></table></div></figure>


<p>But one day I found somebody used similar options with <code>to_json</code> method.
I searched the doc. No doc says <code>to_json</code> can do things like following:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&gt;</span> <span class="no">Order</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="ss">number</span><span class="p">:</span> <span class="s2">&quot;201504211405490&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">to_json</span><span class="p">(</span><span class="ss">only</span><span class="p">:</span> <span class="ss">:number</span><span class="p">)</span>
</span><span class='line'><span class="c1"># =&gt; &quot;[{\&quot;number\&quot;:\&quot;201504211405490\&quot;}]&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>But the code above actually works.
Is <code>to_json</code> uses <code>as_json</code> under the hood?</p>

<h3>Dive into the source</h3>

<p>Now we can check the source code to find the answer.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&gt;</span> <span class="err">$</span> <span class="no">Order</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="ss">number</span><span class="p">:</span> <span class="s2">&quot;201504211405490&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">to_json</span>
</span><span class='line'>
</span><span class='line'><span class="ss">From</span><span class="p">:</span> <span class="sr">/Users/</span><span class="n">lingceng</span><span class="o">/.</span><span class="n">rvm</span><span class="o">/</span><span class="n">gems</span><span class="o">/</span><span class="n">ruby</span><span class="o">-</span><span class="mi">2</span><span class="o">.</span><span class="mi">2</span><span class="o">.</span><span class="mi">0</span><span class="vi">@baozheng</span><span class="o">/</span><span class="n">gems</span><span class="o">/</span><span class="n">activesupport</span><span class="o">-</span><span class="mi">4</span><span class="o">.</span><span class="mi">2</span><span class="o">.</span><span class="mi">0</span><span class="o">/</span><span class="n">lib</span><span class="o">/</span><span class="n">active_support</span><span class="o">/</span><span class="n">core_ext</span><span class="o">/</span><span class="n">object</span><span class="o">/</span><span class="n">json</span><span class="o">.</span><span class="n">rb</span> <span class="err">@</span> <span class="n">line</span> <span class="mi">31</span><span class="p">:</span>
</span><span class='line'><span class="ss">Owner</span><span class="p">:</span> <span class="no">Object</span>
</span><span class='line'><span class="ss">Visibility</span><span class="p">:</span> <span class="kp">public</span>
</span><span class='line'><span class="no">Number</span> <span class="n">of</span> <span class="ss">lines</span><span class="p">:</span> <span class="mi">9</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">to_json_with_active_support_encoder</span><span class="p">(</span><span class="n">options</span> <span class="o">=</span> <span class="kp">nil</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">options</span><span class="o">.</span><span class="n">is_a?</span><span class="p">(</span><span class="o">::</span><span class="ss">JSON</span><span class="p">:</span><span class="ss">:State</span><span class="p">)</span>
</span><span class='line'>    <span class="c1"># Called from JSON.{generate,dump}, forward it to JSON gem&#39;s to_json</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">to_json_without_active_support_encoder</span><span class="p">(</span><span class="n">options</span><span class="p">)</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="c1"># to_json is being invoked directly, use ActiveSupport&#39;s encoder</span>
</span><span class='line'>    <span class="ss">ActiveSupport</span><span class="p">:</span><span class="ss">:JSON</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="nb">self</span><span class="p">,</span> <span class="n">options</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then we edit the method and add a <strong>binding.pry</strong> before the <code>if options.is_a?(::JSON::State)</code> line.
<strong>Remember to recover the change after debug.</strong></p>

<pre><code>&gt; edit Order.where(number: "201504211405490").to_json
</code></pre>

<p>Then run code again:</p>

<pre><code>&gt; Order.where(number: "201504211405490").to_json
</code></pre>

<p>Now we&rsquo;ll get into <code>to_json_with_active_support_encoder</code> method and start to debug.
After some <strong>next</strong> and <strong>step</strong> comand.
We can find that <code>to_json</code> uses ActiveSupport::JSON.encode, which uses <code>as_json</code>.</p>

<pre><code># /lib/active_support/json/encoding.rb#34
# Encode the given object into a JSON string
def encode(value)
  stringify jsonify value.as_json(options.dup)
end
</code></pre>

<p>Yes! <code>to_json</code> uses <code>as_json</code>. We find the answer. So we can use to_json(only: :number) with
confidence.</p>

<h3>Conclusion</h3>

<p>Pry and pry-byebug provides many useful commands.
Using these commands can help to find the definition of a method, track the call stacks, understand the source structure.</p>

<p>This is beauty of open source.
Do not limit yourself.
Dive into the code and get your information.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Diffs Between FormHelper and FormTagHelper in Rails]]></title>
    <link href="http://lingceng.github.io/blog/2016/01/11/diffs-between-formhelper-and-formtaghelper-in-rails/"/>
    <updated>2016-01-11T13:10:00+08:00</updated>
    <id>http://lingceng.github.io/blog/2016/01/11/diffs-between-formhelper-and-formtaghelper-in-rails</id>
    <content type="html"><![CDATA[<p>We can use <strong>form_for</strong> or <strong>form_tag</strong> to build forms in Rails.
But their parameters act differently, which always bites me.</p>

<p>For example, I have to wrap html options into a <code>html</code> key when I change from
form_tag to form_for.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">=</span> <span class="n">form_tag</span> <span class="s1">&#39;/techloglogies/board&#39;</span><span class="p">,</span> <span class="nb">method</span><span class="p">:</span> <span class="ss">:get</span><span class="p">,</span> <span class="ss">class</span><span class="p">:</span> <span class="s1">&#39;form-inline&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="o">=</span> <span class="n">form_for</span> <span class="vi">@search</span><span class="p">,</span> <span class="ss">url</span><span class="p">:</span> <span class="s1">&#39;/techloglogies/board&#39;</span><span class="p">,</span> <span class="nb">method</span><span class="p">:</span> <span class="ss">:get</span><span class="p">,</span> <span class="ss">html</span><span class="p">:</span> <span class="p">{</span> <span class="ss">class</span><span class="p">:</span> <span class="s1">&#39;form-inline&#39;</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And as the 3rd parameter of <code>f.select</code>  is <em>options</em> than <em>html_options</em>.
So I have to add an empty hash <code>{}</code> there to skip it.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">=</span> <span class="n">select_tag</span> <span class="s1">&#39;step&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="n">options_for_select</span><span class="p">(</span><span class="ss">Order</span><span class="p">:</span><span class="ss">:PURE_STEPS</span><span class="o">.</span><span class="n">invert</span><span class="p">,</span> <span class="n">params</span><span class="o">[</span><span class="ss">:step</span><span class="o">]</span><span class="p">),</span>
</span><span class='line'>  <span class="ss">class</span><span class="p">:</span> <span class="s1">&#39;form-control input-sm&#39;</span><span class="p">,</span> <span class="ss">style</span><span class="p">:</span> <span class="s1">&#39;width: 100px&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="n">select</span> <span class="ss">:step</span><span class="p">,</span> <span class="ss">Order</span><span class="p">:</span><span class="ss">:PURE_STEPS</span><span class="o">.</span><span class="n">invert</span><span class="p">,</span> <span class="p">{},</span>
</span><span class='line'>  <span class="ss">class</span><span class="p">:</span> <span class="s1">&#39;form-control input-sm&#39;</span><span class="p">,</span> <span class="ss">style</span><span class="p">:</span> <span class="s1">&#39;width: 100px&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Why they acts differently? Isn&rsquo;t f.select built on select_tag?</h2>

<p><strong>The short answer is NO.</strong> f.select is not built on select_tag.
Let&rsquo;s dig into the source.</p>

<h3>Here&rsquo;s where form_for defined.</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">ActionView::Helper::FormHelper</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">text_field</span><span class="p">(</span><span class="n">object_name</span><span class="p">,</span> <span class="nb">method</span><span class="p">,</span> <span class="n">options</span> <span class="o">=</span> <span class="p">{})</span>
</span><span class='line'>    <span class="ss">Tags</span><span class="p">:</span><span class="ss">:TextField</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">object_name</span><span class="p">,</span> <span class="nb">method</span><span class="p">,</span> <span class="nb">self</span><span class="p">,</span> <span class="n">options</span><span class="p">)</span><span class="o">.</span><span class="n">render</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">form_for</span><span class="p">(</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="p">)</span>
</span><span class='line'>    <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>In FormHelper above also defined a class named ActionView::Helpers::FormBuilder.
The form_for uses the FormBuilder.</p>

<p>Most methods in FormHelper are be delegated by FormBuilder.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># in FormBuilder</span>
</span><span class='line'><span class="k">def</span> <span class="c1">#{selector}(method, options = {})  # def text_field(method, options = {})</span>
</span><span class='line'>  <span class="vi">@template</span><span class="o">.</span><span class="n">send</span><span class="p">(</span>                      <span class="c1">#   @template.send(</span>
</span><span class='line'>    <span class="c1">#{selector.inspect},               #     &quot;text_field&quot;,</span>
</span><span class='line'>    <span class="vi">@object_name</span><span class="p">,</span>                      <span class="c1">#     @object_name,</span>
</span><span class='line'>    <span class="nb">method</span><span class="p">,</span>                            <span class="c1">#     method,</span>
</span><span class='line'>    <span class="n">objectify_options</span><span class="p">(</span><span class="n">options</span><span class="p">))</span>        <span class="c1">#     objectify_options(options))</span>
</span><span class='line'><span class="k">end</span>                                    <span class="c1"># end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Unlike text_field, select helper defined in ActionView::Helpers::FormOptionsHelper.
And a select method in FormBuilder delegates the FormOptionsHelper#select.</p>

<p>text_field or select finnally use classes under module ActionView::Helpers::Tags</p>

<h3>FormTag and SelectTag are defined in ActionView::Helper::FormTagHelper</h3>

<p><strong>ActionView::Helper::FormTagHelper seems totally another implement.</strong>
Most tags helper are component directly in the methods. eg.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">text_field_tag</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="n">value</span> <span class="o">=</span> <span class="kp">nil</span><span class="p">,</span> <span class="n">options</span> <span class="o">=</span> <span class="p">{})</span>
</span><span class='line'>  <span class="n">tag</span> <span class="ss">:input</span><span class="p">,</span> <span class="p">{</span> <span class="s2">&quot;type&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;text&quot;</span><span class="p">,</span> <span class="s2">&quot;name&quot;</span> <span class="o">=&gt;</span> <span class="nb">name</span><span class="p">,</span> <span class="s2">&quot;id&quot;</span> <span class="o">=&gt;</span> <span class="n">sanitize_to_id</span><span class="p">(</span><span class="nb">name</span><span class="p">),</span> <span class="s2">&quot;value&quot;</span> <span class="o">=&gt;</span> <span class="n">value</span> <span class="p">}</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="n">options</span><span class="o">.</span><span class="n">stringify_keys</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>select_tag and FormBuilder#select do dot shere the implement.
They implement the include_blank and other options separately.
Is it a historical reason?</p>

<h2>How to avoid converts?</h2>

<p><a href="https://www.reinteractive.net/posts/158-form-objects-in-rails">Use form object</a> to always use form_for style.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Query Date Range with Ransack]]></title>
    <link href="http://lingceng.github.io/blog/2015/12/28/query-date-range-with-ransack/"/>
    <updated>2015-12-28T19:42:00+08:00</updated>
    <id>http://lingceng.github.io/blog/2015/12/28/query-date-range-with-ransack</id>
    <content type="html"><![CDATA[<h3>The Traditional Way</h3>

<p>Here I have a table of change records in my rails app.
And I have added a query for <em>created_at</em> with <a href="https://github.com/activerecord-hackery/ransack">ransack</a>.</p>

<figure class='code'><figcaption><span>app/controllers/production_status_changes_controller.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">ProductionStatusChangesController</span> <span class="o">&lt;</span> <span class="no">PlainController</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">index</span>
</span><span class='line'>    <span class="vi">@q</span> <span class="o">=</span> <span class="no">ProductionStatusChange</span><span class="o">.</span><span class="n">ransack</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:q</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@orders</span> <span class="o">=</span> <span class="vi">@q</span><span class="o">.</span><span class="n">result</span><span class="o">.</span><span class="n">includes</span><span class="p">(</span><span class="ss">:order</span><span class="p">)</span><span class="o">.</span><span class="n">page</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:page</span><span class="o">]</span><span class="p">)</span><span class="o">.</span><span class="n">per</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:per</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>app/views/production_status_changes/index.html.erb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='erb'><span class='line'><span class="cp">&lt;%=</span> <span class="n">search_form_for</span> <span class="vi">@q</span><span class="p">,</span> <span class="ss">url</span><span class="p">:</span> <span class="n">production_status_changes_path</span><span class="p">,</span> <span class="ss">class</span><span class="p">:</span> <span class="s1">&#39;form-inline&#39;</span> <span class="k">do</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;%=</span>  <span class="n">f</span><span class="o">.</span><span class="n">label</span> <span class="s1">&#39;Create At&#39;</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;%=</span> <span class="n">f</span><span class="o">.</span><span class="n">search_field</span> <span class="ss">:created_at_gteq</span><span class="p">,</span> <span class="ss">class</span><span class="p">:</span> <span class="s1">&#39;form-control input-sm&#39;</span><span class="p">,</span> <span class="s1">&#39;datepicker&#39;</span> <span class="o">=&gt;</span> <span class="kp">true</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;%=</span> <span class="n">f</span><span class="o">.</span><span class="n">search_field</span> <span class="ss">:created_at_lt</span><span class="p">,</span> <span class="ss">class</span><span class="p">:</span> <span class="s1">&#39;form-control input-sm&#39;</span><span class="p">,</span> <span class="s1">&#39;datepicker&#39;</span> <span class="o">=&gt;</span> <span class="kp">true</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<h3>The Problem</h3>

<p>Everything works fine until users start to use it.
They are surpised that, when query with &ldquo;2015-01-01&rdquo; and &ldquo;2015-01-01&rdquo;, nothing comes out.</p>

<p>I of couse know that nothing exists between &lsquo;2015-01-01 00:00&rsquo; and &lsquo;2015-01-01 00:00&rsquo;.
But our users don&rsquo;t think so. They shout that there is a whole day form 2015-01-01 to 2015-01-01!</p>

<h3>Direct solution</h3>

<p>Ok, users are gods.
So I add some codes in my controller:</p>

<figure class='code'><figcaption><span>app/controllers/production_status_changes_controller.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">index</span>
</span><span class='line'>  <span class="n">params</span><span class="o">[</span><span class="ss">:q</span><span class="o">]</span> <span class="o">||=</span> <span class="p">{}</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">params</span><span class="o">[</span><span class="ss">:q</span><span class="o">][</span><span class="ss">:created_at_lt</span><span class="o">].</span><span class="n">present?</span>
</span><span class='line'>    <span class="n">params</span><span class="o">[</span><span class="ss">:q</span><span class="o">][</span><span class="ss">:created_at_lt</span><span class="o">]</span> <span class="o">=</span> <span class="n">params</span><span class="o">[</span><span class="ss">:q</span><span class="o">][</span><span class="ss">:created_at_lt</span><span class="o">].</span><span class="n">to_date</span><span class="o">.</span><span class="n">end_of_day</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="vi">@q</span> <span class="o">=</span> <span class="no">ProductionStatusChange</span><span class="o">.</span><span class="n">ransack</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:q</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>  <span class="vi">@orders</span> <span class="o">=</span> <span class="vi">@q</span><span class="o">.</span><span class="n">result</span><span class="o">.</span><span class="n">includes</span><span class="p">(</span><span class="ss">:order</span><span class="p">)</span><span class="o">.</span><span class="n">page</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:page</span><span class="o">]</span><span class="p">)</span><span class="o">.</span><span class="n">per</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:per</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <em>created_at_lt</em> will convert to &lsquo;2015-01-01 23:59&rsquo;.</p>

<h3>DRY</h3>

<p>I customed the ransack predicates to avoid duplication.
So I can just write the view like following:</p>

<script src="https://gist.github.com/lingceng/65c58512d9bbb50799c7.js"></script>


<h3>Maybe Another Way</h3>

<p>Maybe we can change the js datepicker to set time to 59:59 by default.
I use <a href="http://eonasdan.github.io/bootstrap-datetimepicker/">bootstrap-datetimepicker</a>.
Maybe I will find it out later or someone else can help me?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Export csv or excel by re-using existing HTML view]]></title>
    <link href="http://lingceng.github.io/blog/2015/12/23/export-csv-or-excel-by-re-using-existing-html-view/"/>
    <updated>2015-12-23T19:34:00+08:00</updated>
    <id>http://lingceng.github.io/blog/2015/12/23/export-csv-or-excel-by-re-using-existing-html-view</id>
    <content type="html"><![CDATA[<h2>The Normal Way</h2>

<p>Ruby build-in supports CSV generation as CSV is so simple to compose.
We can convert a 2-D array to a csv string like folllowing:</p>

<pre><code>require 'csv'
arr = [['a', 'b', 'c'], ['1', '2', '3']]
arr.map(&amp;:to_csv).join
</code></pre>

<p>And exporting CSV is easy in rails. Let&rsquo;s see the following snippet:</p>

<pre><code>def index
  @products = Product.order(:name)
  respond_to do |format|
    format.html
    format.csv { send_data @products.to_csv }
  end
end
</code></pre>

<p>See more about export csv in rails <a href="http://railscasts.com/episodes/362-exporting-csv-and-excel?view=asciicast">here</a></p>

<h2>I&rsquo;m lazy</h2>

<p>However, I&rsquo;m a lazy man. I even don&rsquo;t want to prepare 2-D array.</p>

<p>In most cases, we have rendered the table in the view already.
We have done some translations or formats in the view.
And I don&rsquo;t want to move the view code to the controller just for exporting.</p>

<h2>Re-use the view</h2>

<p>So, how about re-use the table in the view?
I find out that <a href="http://devdocs.io/rails/abstractcontroller/rendering#method-i-render_to_string">render_to_string</a> can help me do the job.</p>

<figure class='code'><figcaption><span>plain_controller.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">generate_csv_data</span><span class="p">(</span><span class="n">template</span> <span class="o">=</span> <span class="kp">nil</span><span class="p">)</span>
</span><span class='line'>  <span class="n">template</span> <span class="o">||=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">controller_name</span><span class="si">}</span><span class="s2">/</span><span class="si">#{</span><span class="n">action_name</span><span class="si">}</span><span class="s2">.html.slim&quot;</span>
</span><span class='line'>  <span class="n">content</span> <span class="o">=</span> <span class="n">render_to_string</span><span class="p">(</span><span class="n">template</span><span class="p">)</span>
</span><span class='line'>  <span class="n">doc</span> <span class="o">=</span>  <span class="ss">Nokogiri</span><span class="p">:</span><span class="ss">:HTML</span><span class="p">(</span><span class="n">content</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">table</span> <span class="o">=</span>  <span class="n">doc</span><span class="o">.</span><span class="n">at_css</span><span class="p">(</span><span class="s1">&#39;table&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">data</span> <span class="o">=</span> <span class="n">table</span><span class="o">.</span><span class="n">css</span><span class="p">(</span><span class="s1">&#39;tr&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">map</span> <span class="k">do</span> <span class="o">|</span><span class="n">r</span><span class="o">|</span>
</span><span class='line'>    <span class="n">r</span><span class="o">.</span><span class="n">css</span><span class="p">(</span><span class="s1">&#39;td,th&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">map</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:text</span><span class="p">)</span><span class="o">.</span><span class="n">to_csv</span>
</span><span class='line'>  <span class="k">end</span><span class="o">.</span><span class="n">join</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Convert from utf8 to gbk to make it compatible with Windows Office Excel</span>
</span><span class='line'>  <span class="c1"># And Mac number can work with GBK too</span>
</span><span class='line'>  <span class="n">data</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="s1">&#39;GBK&#39;</span><span class="p">,</span> <span class="k">undef</span><span class="p">:</span> <span class="ss">:replace</span><span class="p">,</span> <span class="ss">replace</span><span class="p">:</span> <span class="s2">&quot;&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Respond csv file when csv format requested</span>
</span><span class='line'><span class="nb">format</span><span class="o">.</span><span class="n">csv</span> <span class="p">{</span> <span class="n">send_data</span> <span class="n">generate_csv_data</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here I get the view page as a string. And extract the table in the string with <a href="http://www.nokogiri.org/">nokogiri</a>.
We can also convert it into an excel easily.
See full codes <a href="https://gist.github.com/lingceng/840f97f17128d8a9fd3b">here</a></p>

<p>Inspired by <a href="https://github.com/livingsocial/excelinator">excelinator</a>. But
sadly, the excel exported by excelinator can not be opened with Number on my Mac.
So I write a version to export csv.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tips About Using AASM gem]]></title>
    <link href="http://lingceng.github.io/blog/2015/12/19/tips-about-using-aasm-gem/"/>
    <updated>2015-12-19T12:26:00+08:00</updated>
    <id>http://lingceng.github.io/blog/2015/12/19/tips-about-using-aasm-gem</id>
    <content type="html"><![CDATA[<p>Recently, I&rsquo;m using <a href="https://github.com/aasm/aasm">aasm gem</a> to do order production status control.
Here I have some tips about using aasm gem.</p>

<p>I&rsquo;m using aasm 4.5.0 and rails 4.2.0. First, I post a snippet here for better explanation.</p>

<figure class='code'><figcaption><span>order.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Order</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">AASM</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">aasm</span> <span class="ss">column</span><span class="p">:</span> <span class="ss">:production_status</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">state</span> <span class="ss">:idle</span><span class="p">,</span> <span class="ss">initial</span><span class="p">:</span> <span class="kp">true</span>
</span><span class='line'>    <span class="n">state</span> <span class="ss">:at_center</span>
</span><span class='line'>    <span class="n">state</span> <span class="ss">:ready</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">after_all_transitions</span> <span class="ss">:_save_production_status_change</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">event</span> <span class="ss">:check_in</span><span class="p">,</span> <span class="ss">before</span><span class="p">:</span> <span class="ss">:set_current_step_to_center</span><span class="p">,</span> <span class="ss">guard</span><span class="p">:</span> <span class="ss">:_status_fit</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">transitions</span> <span class="ss">from</span><span class="p">:</span> <span class="o">[</span><span class="ss">:idle</span><span class="o">]</span><span class="p">,</span> <span class="ss">to</span><span class="p">:</span> <span class="ss">:at_center</span><span class="p">,</span> <span class="ss">after</span><span class="p">:</span> <span class="ss">:_change_status_to_repairing</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">event</span> <span class="ss">:to_ready</span><span class="p">,</span> <span class="ss">before</span><span class="p">:</span> <span class="ss">:set_current_step</span><span class="p">,</span> <span class="ss">guard</span><span class="p">:</span> <span class="ss">:_status_fit</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">transitions</span> <span class="ss">from</span><span class="p">:</span> <span class="o">[</span><span class="ss">:at_center</span><span class="p">,</span> <span class="ss">:idle</span><span class="o">]</span><span class="p">,</span> <span class="ss">to</span><span class="p">:</span> <span class="ss">:ready</span><span class="p">,</span> <span class="ss">after</span><span class="p">:</span> <span class="ss">:_change_status_to_repairing</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>How to keep actions in transaction?</h2>

<p>Of course, you can acheive it by wrapping actions in a transaction. eg.</p>

<pre><code>Order.transaction do
  order.check_in
  order.save
end
</code></pre>

<p>However, aasm also provide a bang method to acheive it. eg.</p>

<pre><code>order.check_in!
</code></pre>

<p>But the two forms is not the same.</p>

<p>Please take care the save point if you choose to use <code>order.check_in!</code>.
<code>order.check_in!</code> internally calls save after <code>new_state enter</code> callback.
So, changes in callbacks after <code>new_state enter</code>  will not auto-save.</p>

<p>See the list of callbacks.</p>

<pre><code>begin
  event           before
  event           guards
  transition      guards
  old_state       before_exit
  old_state       exit
                  after_all_transitions
  transition      after
  new_state       before_enter
  new_state       enter
  ...update state...               # here is the save point
  event         success            # if persist successful
  old_state       after_exit
  new_state       after_enter
  event           after
rescue
  event           error
end
</code></pre>

<p>Let&rsquo;s see a example. If I wrote the <code>check_in</code> event like following:</p>

<pre><code>event :check_in, before: :set_current_step_to_center, guard: :_status_fit,
  after: :_change_status_to_repairing do
  transitions from: [:idle], to: :at_center
end

def _change_status_to_repairing
  status = 'repairing'
end
</code></pre>

<p>The <code>_change_status_to_repairing</code> is at <code>event after</code> callback.
So, when I run <code>order.check_in!</code>, <code>order.status</code> will not persist.</p>

<pre><code>order.check_in!
order.reload.status == 'repairing'
# =&gt; false
</code></pre>

<p>Of cause, you can call save in <code>_change_status_to_repairing</code>
But the order will be persisted even when you run non-bang method
<code>order.check_in</code>.</p>

<pre><code>def _change_status_to_repairing
  status = 'repairing'
  save
end
</code></pre>

<p>Oh. Maybe you should choose to use the first form.</p>

<h2>Avoid using Proc.new with optional argument in guards and callbacks</h2>

<p>See <a href="https://github.com/aasm/aasm/issues/293">https://github.com/aasm/aasm/issues/293</a></p>

<h2>Take care of before event filter</h2>

<p>See <a href="https://github.com/aasm/aasm/issues/294">https://github.com/aasm/aasm/issues/294</a></p>

<h2>duplicate global callbacks caused by after_all_transitions</h2>

<p>See <a href="https://github.com/aasm/aasm/issues/297">https://github.com/aasm/aasm/issues/297</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Put javascript library files together in Rails]]></title>
    <link href="http://lingceng.github.io/blog/2015/12/15/put-javascript-library-files-together-in-rails/"/>
    <updated>2015-12-15T17:06:00+08:00</updated>
    <id>http://lingceng.github.io/blog/2015/12/15/put-javascript-library-files-together-in-rails</id>
    <content type="html"><![CDATA[<p><strong>TLDR: Put all javascript library files under <code>app/assets/libfolder</code>.
Refer the files without the <code>libfolder</code></strong></p>

<p>We always need to import some javascript libs to our Rails application.
Some libs has correspondent gems.
For example, <strong>jquery.js</strong> has a <strong>jquery-rails gem</strong>.</p>

<p>But some other libs may not have the correspondent gems.
What&rsquo;s more, it may be a waste to use a &ldquo;wrapper gem&rdquo; to just import a javascript file.
Some wrapper gem may not up-to-date to the origin javascript lib.
So we need to import javascript libs manually in some cases.</p>

<p>Rails default use <a href="https://github.com/sstephenson/sprockets">sprockets</a> to
manage assets.
And we always split assets into <code>javascripts</code>, <code>stylesheets</code>, <code>images</code> and <code>fonts</code> folders.
But if we split a javascript library into these files, it maybe a little messy.</p>

<p><strong>Actually we can put the files together in a same foler.</strong></p>

<p>For example, I want to import <a href="https://github.com/lipis/bootstrap-sweetalert">bootstrap-sweetalert</a>  into
my Rails app.
I download the <code>sweet-alert.less</code> and <code>sweet-alert.js</code>.
Then put the two files into <code>vender/assets/sweet-alert</code>.
<code>sweet-alert</code> here is a new created folder.</p>

<p>The <code>vender/assets/sweet-alert</code> folder will be treat as base path to query
assets. So we can refer the <code>sweet-alert.js</code> in our application.js as following:</p>

<pre><code> //= require sweet-alert
</code></pre>

<p>We can do the same for <code>sweet-alert.less</code> in our application.less.</p>

<p>Note that we have <a href="https://www.codefellows.org/blog/5-ways-to-manage-front-end-assets-in-rails">other ways to manage the assets</a>. But it&rsquo;s another topic then.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Union select statements in Rails]]></title>
    <link href="http://lingceng.github.io/blog/2015/10/10/union-select-statements-in-rails/"/>
    <updated>2015-10-10T11:42:00+08:00</updated>
    <id>http://lingceng.github.io/blog/2015/10/10/union-select-statements-in-rails</id>
    <content type="html"><![CDATA[<p>Here we have a table named <code>user_statuses</code> like following</p>

<pre><code> name    | status
 --------+-------
  'jack' |   1
  'jack' |   2
  'sam'  |   6
  'lucy' |   1
  'toy'  |   2
  'toy'  |   7
  'jack' |   7
</code></pre>

<p>I want to collect the status with follwing rule:</p>

<ul>
<li>Keep all [1-2] statuses</li>
<li>Ignore other status above 2 if one has any [1-2] status</li>
<li>keep only one ohter status above 2 if one do not has any [1-2] status</li>
</ul>


<p>So the result should like following:</p>

<pre><code> name    | status
 --------+-------
  'jack' |   1
  'jack' |   2
  'sam'  |   6
  'lucy' |   1
  'toy'  |   2
</code></pre>

<p>The real life case is more complicated. I want to achieve this rule in SQL.
As a result I can do some group or something else later.</p>

<p>After some searches, I found out <code>union all</code> can do the job.
But call <code>union</code> on ActiveRelation returns a Arel::Nodes::Union but ActiveRelation.
Gem <a href="https://github.com/brianhempel/active_record_union">active record union</a> get a
good solution.</p>

<p>Here&rsquo;s my demo sulution:</p>

<pre><code>  statuses = [1, 2]
  left = UserStatus.where(status: statuses).select(:name, :status)
  right = UserStatus.select(:name, 'MIN(status) as status').
    group(:name).
    having('MIN(status) &gt; 2')
  query = left.union_all(right)
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[When Rails InvalidAuthenticityToken Happens]]></title>
    <link href="http://lingceng.github.io/blog/2014/11/26/when-rails-invalidauthenticitytoken-happens/"/>
    <updated>2014-11-26T16:31:00+08:00</updated>
    <id>http://lingceng.github.io/blog/2014/11/26/when-rails-invalidauthenticitytoken-happens</id>
    <content type="html"><![CDATA[<p><code>InvalidAuthenticityToken</code> happens if you enabled <code>protect_from_forgery</code>
but does not handle token well.</p>

<p>In <code>appliction_controller.rb</code></p>

<pre><code>protect_from_forgery
</code></pre>

<p>This will automatically include a security token in all forms and Ajax
requests generated by Rails. If the security token doesn&rsquo;t match what was
expected, the session will be reset.</p>

<p>In page <code>&lt;head&gt;</code></p>

<pre><code>&lt;%= csrf_meta_tags %&gt;
</code></pre>

<p>Is basically fulfilling the same thing as hidden form fields but is there to give
javascript requests that aren&rsquo;t tied to a form an easy way of getting the token.</p>

<p>If you use the jquery-ujs library the content of that meta tag is automatically
added (as a request header) to any ajax requests made.</p>

<p><code>jquery-ujs</code> add a ajax filter to append token to parameter</p>

<pre><code>// ajaxPrefilter is a jquery method
$.ajaxPrefilter(function(options, originalOptions, xhr) {
  if ( !options.crossDomain ) { rails.CSRFProtection(xhr); }
});
</code></pre>

<p>Note: Only HTML and JavaScript requests are checked.
See more about <code>ActionController::RequestForgeryProtection</code> in rails API.</p>

<h3>Conclusion</h3>

<p>Always import <code>jquery-ujs</code> when enabled <code>protect_from_forgery</code>
And put <code>&lt;%= csrf_meta_tags %&gt;</code> in page head.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails Time Best Practice]]></title>
    <link href="http://lingceng.github.io/blog/2014/11/22/rails-time-best-practice/"/>
    <updated>2014-11-22T18:38:00+08:00</updated>
    <id>http://lingceng.github.io/blog/2014/11/22/rails-time-best-practice</id>
    <content type="html"><![CDATA[<h4>Setup</h4>

<p>Let&rsquo;s create a demo table and do some configurations in a rails project.
Then we&rsquo;ll do some tests about time in <code>rails console</code>.</p>

<pre><code>class CreateHellos &lt; ActiveRecord::Migration
  def change
    create_table :hellos do |t|
      t.timestamps
    end
  end
end
</code></pre>

<p>Add following to <code>config/application.rb</code></p>

<pre><code>Rails.application.config.active_record.default_timezone = :local
Rails.application.config.time_zone = 'Beijing'
</code></pre>

<p><code>config.time_zone</code> sets the default time zone for the application
and enables time zone awareness for Active Record.</p>

<p><code>config.active_record.default_timezone</code> determines whether to use Time.local
 (if set to :local) or Time.utc (if set to :utc) when pulling dates and times
from the database.  The default is :utc.</p>

<h4><code>to_s(:db)</code> is error-prone</h4>

<p>Run following codes in rails console.
Here CST stands for (China Standard Time) which is zone name for Beijing.</p>

<pre><code>l = FinanceItem.create
#=&gt; #&lt;FinanceItem id: 1, created_at: "2014-11-22 03:00:32", updated_at: "2014-11-22 03:00:32" &gt;
l.created_at
#=&gt; Sat, 22 Nov 2014 11:00:32 CST +08:00
</code></pre>

<p>The timezone offset is <strong>+08:00</strong> because I set <code>config.time_zone = 'Beijing'</code></p>

<pre><code>l.created_at.class
#=&gt; ActiveSupport::TimeWithZone
</code></pre>

<p>Rails use ActiveSupport::TimeWithZone for datetime field.</p>

<pre><code>l.created_at.strftime("%Y-%m-%d %H:%M%S")
#=&gt; "2014-11-22 11:00:32"
l.created_at.to_s(:db)
#=&gt; "2014-11-22 03:00:32"
</code></pre>

<p>We can see, two date strings are different.
Because <code>to_s(:db)</code> always output time string in UTC.
<code>strftime</code> or <code>to_s</code> ouptut time string with configured time zone.</p>

<p>Here is the <code>TimewithZone#to_s(format)</code> source:</p>

<pre><code>:default - default value, mimics Ruby 1.9 Time#to_s format.
:db - format outputs time in UTC :db time. See Time#to_formatted_s(:db).
Any key in Time::DATE_FORMATS can be used. See active_support/core_ext/time/conversions.rb.
# File activesupport/lib/active_support/time_with_zone.rb, line 193
def to_s(format = :default)
  if format == :db
    utc.to_s(format)
  elsif formatter = ::Time::DATE_FORMATS[format]
    formatter.respond_to?(:call) ? formatter.call(self).to_s : strftime(formatter)
  else
    "#{time.strftime("%Y-%m-%d %H:%M:%S")} #{formatted_offset(false, 'UTC')}" # mimicking Ruby 1.9 Time#to_s format
  end
end
</code></pre>

<p>How about <code>Time#to_s(:db)</code> and <code>Time#strftime("%Y-%m-%d %H:%M:%S")</code>?
Here zone name is CST because my system local is &lsquo;Beijing&rsquo;.
It&rsquo;s different with TimeWithZone which get zone from project configurations <code>config.time_zone</code>.</p>

<pre><code>a = Time.now
=&gt; 2015-03-12 16:56:21
a.zone
=&gt; "CST"
a.to_s(:db)
=&gt; "2015-03-12 16:56:21"
a.strftime("%Y-%m-%d %H:%M:%S")
=&gt; "2015-03-12 16:56:21"
</code></pre>

<p><code>Time#to_s(:db)</code> and <code>Time#strftime("%Y-%m-%d %H:%M:%S")</code> output the same.
We can find out that <code>Time#to_s(:db)</code> is actually called Time#strftime(&lsquo;%Y-%m-%d %H:%M:%S&rsquo;) from source</p>

<p>As we can see, <code>to_s(:db)</code> is NOT consistent between Time and TimeWithZone.
TimeWithZone#to_s(:db) will generate time string of UTC.
Time#to_s(:db) will return time string of configured local.</p>

<p>So calling <code>to_s(:db)</code> is always error-prone. Do not use it unless you know what you are doing.
And you&rsquo;d better not use Time and TimeWithZone interchangeably.</p>

<h4>Time.zone.parse get time with timezone</h4>

<p>Let&rsquo;s try following codes.</p>

<pre><code>a = DateTime.parse('2014-11-22 12:35:05')
#=&gt; Sat, 22 Nov 2014 12:35:05 +0000
a.to_s(:rfc822)
#=&gt; "Sat, 22 Nov 2014 12:35:05 +0000"
a.in_time_zone.to_s(:rfc822)
#=&gt; "Sat, 22 Nov 2014 20:35:05 +0800"

b = Time.zone.parse('2014-11-22 12:35:05')
#=&gt; 2014-11-22 12:35:05
b.to_s(:rfc822)
#=&gt; "Sat, 22 Nov 2014 12:35:05 +0800"
</code></pre>

<p>Notice that <code>Time.zone.parse</code> has <code>+0800</code> timezone offset but <code>DateTime.parse</code>
has &lsquo;+0000&rsquo; timezone offset.</p>

<p>So <code>Time.zone.parse</code> may be better for you.</p>

<h3>Time.now vs Time.current</h3>

<p>Let&rsquo;s see the definition of <code>Time.current</code></p>

<pre><code># File activesupport/lib/active_support/core_ext/time/calculations.rb, line 29
def current
  ::Time.zone ? ::Time.zone.now : ::Time.now
end
</code></pre>

<p>Time.now uses the <strong>system time zone</strong> because it&rsquo;s is part of the Ruby standard library.
Time.zone.now will set zone with <code>config.time_zone</code>.</p>

<p>Using <code>Time.now</code> make troubles when your system time zone is different with
<code>config.time_zone</code></p>

<h3>Best practice</h3>

<p>Set the following config.</p>

<pre><code>config.active_record.default_timezone = :local
config.time_zone = 'YourLocalName'
</code></pre>

<p>Use <code>Time.zone.parse</code> and do <strong>NOT</strong> use <code>DateTime.parse</code>.</p>

<p>Use <code>Time.zone.now</code> or <code>Time.current</code> and do <strong>NOT</strong> use <code>Time.now</code>.</p>

<p>Thus we can keep all time class to TimeWithZone and get consistent behavior.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Turbolink Best Practice]]></title>
    <link href="http://lingceng.github.io/blog/2014/10/16/turbolink-best-practice/"/>
    <updated>2014-10-16T12:12:00+08:00</updated>
    <id>http://lingceng.github.io/blog/2014/10/16/turbolink-best-practice</id>
    <content type="html"><![CDATA[<h2>What does Turbolink do?</h2>

<p><a href="https://github.com/rails/turbolinks">Turbolink</a> makes browser only replace page&rsquo;s <code>&lt;body&gt;</code> and <code>&lt;title&gt;</code> to simulate page jumping.</p>

<p>TLDR:
Javascript context will be kept even after page jumpings.
So you need to take care all cases of javascript global handles.
eg. global events bindings, global varibles, global timmers.</p>

<h2>What&rsquo;s the best practice?</h2>

<p>Put all JavaScript and CSS in <code>&lt;HEAD&gt;</code> and keep <code>&lt;HEAD&gt;</code> the same in every page.</p>

<p>Use <a href="https://coderwall.com/p/ypzfdw/faster-page-loads-with-turbolinks">jquery.turbolink</a> to hijack <code>jQuery.ready()</code>.</p>

<p>jquery.turbolink make sure all events binded with <strong>jQuery.ready()</strong> or <strong>jQuery()</strong> are triggered.
No matter you are doing a fresh page load or turbolink jumps.</p>

<p>You should load scripts in following order:</p>

<pre><code>jQuery
jQuery.turbolinks
...other scripts go here...
Turbolinks
</code></pre>

<p><a href="https://coderwall.com/p/ypzfdw/faster-page-loads-with-turbolinks">Here</a>
explains why you should put tubolink at last:</p>

<blockquote><p>The reason for jQuery.turbolinks being before all scripts is so to let
it hijack the <code>$(function() { ... })</code> call that your other scripts will use.</p>

<p>Turbolinks then needs to be at the end because it has to be the last
to install the click handler, so not to interfere with other scripts.</p></blockquote>

<h2>Take care of dangerous global handles</h2>

<p>Global delegated events will effect every page.
eg. You add a script as following:</p>

<pre><code>$(document).on('click', 'button', function(){
  console.log("clicked button")
})
</code></pre>

<p>&ldquo;clicked button&rdquo; will be printed when you click a button <strong>in every pages</strong>.</p>

<p>Another example is the hijacked jquery ready event as mentioned above.
So you should distinguish pages in you codes. eg.</p>

<pre><code>$(function() {
  if (current_page == 'index') {
    // do staff for index page
  }
});
</code></pre>

<p>See details about distinguishing pages below.</p>

<p>Global <code>setInterval</code> or <code>setTimeout</code> need to be clear too! DEMO:</p>

<pre><code>$(document).one('page:before-change', function(event) {
  clearTheTimer();
}
</code></pre>

<p>See more <a href="http://staal.io/blog/2013/01/18/dangers-of-turbolinks/">here</a></p>

<h2>How to control javascript init for every page?</h2>

<p>Mark <code>&lt;body&gt;</code> with tags then trigger it according to tag. eg.
I want javascript only run in topics pages in my rails app:</p>

<pre><code>// In app/views/layouts/application.html.erb
&lt;body data-controller-name="&lt;%= controller_name %&gt;"&gt;

// In topics.coffee
window.Topics =
  replies_per_page: 50
  init : () -&gt;
    console.log "hello"

$(document).ready -&gt;
  if $('body').data('controller-name') in ['topics']
    Topics.init()

// Add topics to appliction.js
//= require topics
</code></pre>

<h2>You can put javascript at the end of body.</h2>

<p>But it&rsquo;s not recommended.
You will loose benefit with HTTP cache when you put javascript at the and of the
body.</p>

<p>And if you add code with hijack jquery ready event like following:</p>

<pre><code>$(document).ready -&gt;
  console.log 'hello'
</code></pre>

<p>After jumps in and out with turbolink.
The ready events will be bind twice.</p>

<p>Problem can not be solved even add the <code>data-turbolinks-eval=false</code> tag.
<code>data-turbolinks-eval=false</code> can avoid the events being muti-binded.
But the <code>console.log 'hello'</code> has already registered in the ready event.
So the &lsquo;hello&rsquo; will be printed in every page.</p>

<h2>What will happen when I changed head content?</h2>

<p>It depends on how you change it.</p>

<p>If you add some <code>&lt;script type="text/javascript"&gt;</code> tag in head, eg.</p>

<pre><code>// On page B
&lt;script type="text/javascript"&gt;
  console.log('hello')
&lt;/script&gt;
</code></pre>

<p>When you click a link on page A and jump to page B, the &lsquo;hello&rsquo; will <strong>not</strong> printed.
The script tag will be ignored.</p>

<p>It&rsquo;s the same when you make it a <code>src</code> link.</p>

<pre><code>// On page B
&lt;script type="text/javascript" src='hello.js'&gt; &lt;/script&gt;
</code></pre>

<p>You can add a <code>data-turbolinks-track</code> tag to make it work. But it has drawbacks.</p>

<pre><code>&lt;script type="text/javascript" src="http://lingceng.github.io/hello.js" data-turbolinks-track&gt;&lt;/script&gt;
</code></pre>

<p>When this case, &lsquo;hello&rsquo; will be printed,
every things seems fine except <strong>slow page load</strong>.</p>

<p>You&rsquo;ll technically be requesting the same page twice.
Once through Turbolinks to detect that the assets changed,
and then again do a full redirect to that page.</p>

<p>You should always add <code>data-turbolinks-track</code> to JavaScript and CSS links.
This will trigger full page load when your assets changed.</p>

<p>When page A and page B have different <code>track targets</code>,
every switch between them will cause <code>double load</code>.</p>

<p>See the <a href="https://github.com/rails/turbolinks/blob/master/lib%2Fassets%2Fjavascripts%2Fturbolinks.js.coffee#L231">code</a>
to know the details</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">extractTrackAssets = </span><span class="nf">(doc) -&gt;</span>
</span><span class='line'>  <span class="k">for</span> <span class="nx">node</span> <span class="k">in</span> <span class="nx">doc</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s">&#39;head&#39;</span><span class="p">).</span><span class="nx">childNodes</span> <span class="k">when</span> <span class="nx">node</span><span class="p">.</span><span class="nx">getAttribute</span><span class="o">?</span><span class="p">(</span><span class="s">&#39;data-turbolinks-track&#39;</span><span class="p">)</span><span class="o">?</span>
</span><span class='line'>    <span class="nx">node</span><span class="p">.</span><span class="nx">getAttribute</span><span class="p">(</span><span class="s">&#39;src&#39;</span><span class="p">)</span> <span class="o">or</span> <span class="nx">node</span><span class="p">.</span><span class="nx">getAttribute</span><span class="p">(</span><span class="s">&#39;href&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nv">assetsChanged = </span><span class="nf">(doc) -&gt;</span>
</span><span class='line'>  <span class="nx">loadedAssets</span> <span class="o">||=</span> <span class="nx">extractTrackAssets</span> <span class="nb">document</span>
</span><span class='line'>  <span class="nv">fetchedAssets  = </span><span class="nx">extractTrackAssets</span> <span class="nx">doc</span>
</span><span class='line'>  <span class="nx">fetchedAssets</span><span class="p">.</span><span class="nx">length</span> <span class="o">isnt</span> <span class="nx">loadedAssets</span><span class="p">.</span><span class="nx">length</span> <span class="o">or</span> <span class="nx">intersection</span><span class="p">(</span><span class="nx">fetchedAssets</span><span class="p">,</span> <span class="nx">loadedAssets</span><span class="p">).</span><span class="nx">length</span> <span class="o">isnt</span> <span class="nx">loadedAssets</span><span class="p">.</span><span class="nx">length</span>
</span></code></pre></td></tr></table></div></figure>


<p>One last rescue is to prevent turbolink jump by add <code>data-no-turbolink</code> tag.
And then you will not benefit from turbolink speed boost.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;/&quot;</span><span class="nt">&gt;</span>Home (via Turbolinks)<span class="nt">&lt;/a&gt;</span>
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;some-div&quot;</span> <span class="na">data-no-turbolink</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;/&quot;</span><span class="nt">&gt;</span>Home (without Turbolinks)<span class="nt">&lt;/a&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jQuery Source Structure Tip]]></title>
    <link href="http://lingceng.github.io/blog/2014/03/26/jquery-source-structure-tip/"/>
    <updated>2014-03-26T09:12:00+08:00</updated>
    <id>http://lingceng.github.io/blog/2014/03/26/jquery-source-structure-tip</id>
    <content type="html"><![CDATA[<p>I&rsquo;m puzzled when I first see the jQuery source code.
I finaly find a clue after several attempts.</p>

<p>Put aside other modules, we can find out that jQuery has the ordinary JS class structrue.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">jQuery</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">jQuery</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>It seems not that same with how we use jQuery. secret is the aliases.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// we can use the dollar sign to call the jQuery function</span>
</span><span class='line'><span class="nx">$</span> <span class="o">=</span> <span class="nx">jQuery</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// we can use the `jQuery.fn.newFeature = function() {}` to extend the jQuery instance function</span>
</span><span class='line'><span class="c1">// Why we can add fn key to jQuery?</span>
</span><span class='line'><span class="c1">// Answer is jQuery is a function and function is a object too. So we can add</span>
</span><span class='line'><span class="c1">// properties to function</span>
</span><span class='line'><span class="nx">jQuery</span><span class="p">.</span><span class="nx">fn</span> <span class="o">=</span> <span class="nx">jQuery</span><span class="p">.</span><span class="nx">prototype</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>But when <code>$("#someid")</code> always return a jQuery instance, where the <code>new</code> keyword?</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">jQuery</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// jQuery.prototype.init is the actually creator function</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">new</span> <span class="nx">jQuery</span><span class="p">.</span><span class="nx">fn</span><span class="p">.</span><span class="nx">init</span><span class="p">(</span> <span class="nx">selector</span><span class="p">,</span> <span class="nx">context</span> <span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//  mount prototype on jQuery to jQuery.fn.init</span>
</span><span class='line'><span class="nx">jQuery</span><span class="p">.</span><span class="nx">fn</span><span class="p">.</span><span class="nx">init</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="nx">jquery</span><span class="p">.</span><span class="nx">fn</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s see the complete struture now.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// utils</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// class structure</span>
</span><span class='line'><span class="nx">jQuery</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">new</span> <span class="nx">jQuery</span><span class="p">.</span><span class="nx">fn</span><span class="p">.</span><span class="nx">init</span><span class="p">(</span> <span class="nx">selector</span><span class="p">,</span> <span class="nx">context</span> <span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">jQuery</span><span class="p">.</span><span class="nx">fn</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>   <span class="nx">init</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">selector</span><span class="p">,</span> <span class="nx">context</span><span class="p">)</span> <span class="p">{}</span>
</span><span class='line'>   <span class="c1">// other core instance methods</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">jQuery</span><span class="p">.</span><span class="nx">fn</span> <span class="o">=</span> <span class="nx">jQuery</span><span class="p">.</span><span class="nx">prototype</span><span class="p">;</span>
</span><span class='line'><span class="nx">jQuery</span><span class="p">.</span><span class="nx">fn</span><span class="p">.</span><span class="nx">init</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="nx">jquery</span><span class="p">.</span><span class="nx">fn</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// instance methods extend</span>
</span><span class='line'><span class="c1">// or use this style: jQuery.fn.hello = funtion() {}</span>
</span><span class='line'><span class="nx">jQuery</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="nx">jQuery</span><span class="p">.</span><span class="nx">fn</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>   <span class="c1">// ...</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// class methods extend</span>
</span><span class='line'><span class="c1">// or use this style: jQuery.hello = funtion() {}</span>
</span><span class='line'><span class="c1">// maybe some utils</span>
</span><span class='line'><span class="nx">jQuery</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="nx">jQuery</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">isFunction</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span> <span class="nx">obj</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">jQuery</span><span class="p">.</span><span class="nx">type</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span> <span class="o">===</span> <span class="s2">&quot;function&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="c1">// ...</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// module export or AMD</span>
</span><span class='line'><span class="nb">window</span><span class="p">.</span><span class="nx">$</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">jQuery</span> <span class="o">=</span> <span class="nx">jQuery</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[minitest mock and stud]]></title>
    <link href="http://lingceng.github.io/blog/2014/03/18/minitest-mock-and-stud/"/>
    <updated>2014-03-18T08:28:00+08:00</updated>
    <id>http://lingceng.github.io/blog/2014/03/18/minitest-mock-and-stud</id>
    <content type="html"><![CDATA[<h3>capture io</h3>

<p>Use <code>capture_io</code> to test output.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">out</span><span class="p">,</span> <span class="n">err</span> <span class="o">=</span> <span class="n">capture_io</span> <span class="k">do</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;Some info&quot;</span>
</span><span class='line'>  <span class="nb">warn</span> <span class="s2">&quot;You did a bad thing&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">assert_match</span> <span class="sr">%r%info%</span><span class="p">,</span> <span class="n">out</span>
</span><span class='line'><span class="n">assert_match</span> <span class="sr">%r%bad%</span><span class="p">,</span> <span class="n">err</span>
</span></code></pre></td></tr></table></div></figure>


<h3>mock</h3>

<p><code>capture_io</code> uses StringIO to wrap $stdout and $stderr.
How to simulate user input or socket talks? Mock may do the job.</p>

<figure class='code'><figcaption><span>stupidc.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Stupidc</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">input</span><span class="o">=</span><span class="no">STDIN</span><span class="p">,</span> <span class="n">output</span><span class="o">=</span><span class="no">STDOUT</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@input</span> <span class="o">=</span> <span class="n">input</span>
</span><span class='line'>    <span class="vi">@output</span> <span class="o">=</span> <span class="n">output</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">say_hello</span><span class="p">()</span>
</span><span class='line'>    <span class="vi">@output</span><span class="o">.</span><span class="n">puts</span> <span class="s1">&#39;hello&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>stupidc_spec.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;minitest/autorun&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">describe</span> <span class="no">Stupidc</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">before</span> <span class="k">do</span>
</span><span class='line'>    <span class="vi">@input</span> <span class="o">=</span> <span class="ss">MiniTest</span><span class="p">:</span><span class="ss">:Mock</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>    <span class="vi">@output</span> <span class="o">=</span> <span class="ss">MiniTest</span><span class="p">:</span><span class="ss">:Mock</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>
</span><span class='line'>    <span class="vi">@stupidc</span> <span class="o">=</span> <span class="no">Stupidc</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="vi">@input</span><span class="p">,</span> <span class="vi">@output</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="n">it</span> <span class="s2">&quot;should copy file to source when file is target&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="vi">@output</span><span class="o">.</span><span class="n">expect</span> <span class="ss">:puts</span><span class="p">,</span> <span class="kp">nil</span><span class="p">,</span> <span class="o">[</span><span class="s1">&#39;hello&#39;</span><span class="o">]</span>
</span><span class='line'>    <span class="vi">@stupidc</span><span class="o">.</span><span class="n">say_hello</span><span class="p">()</span>
</span><span class='line'>    <span class="vi">@output</span><span class="o">.</span><span class="n">verify</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>stub</h3>

<p>Stub has similar function with mock, but no need to inject a property.
Stub can simulate module methods or instance methods (They are the same in ruby, all class is the instance of Class) with ease.
see <a href="https://github.com/seattlerb/minitest/blob/master/test/minitest/test_minitest_mock.rb">test</a></p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">test_stub_yield_self</span>
</span><span class='line'>  <span class="n">obj</span> <span class="o">=</span> <span class="s2">&quot;foo&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">val</span> <span class="o">=</span> <span class="n">obj</span><span class="o">.</span><span class="n">stub</span> <span class="ss">:to_s</span><span class="p">,</span> <span class="s2">&quot;bar&quot;</span> <span class="k">do</span> <span class="o">|</span><span class="n">s</span><span class="o">|</span>
</span><span class='line'>    <span class="n">s</span><span class="o">.</span><span class="n">to_s</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="vi">@tc</span><span class="o">.</span><span class="n">assert_equal</span> <span class="s2">&quot;bar&quot;</span><span class="p">,</span> <span class="n">val</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[basics about minitest]]></title>
    <link href="http://lingceng.github.io/blog/2014/03/17/basics-about-minitest/"/>
    <updated>2014-03-17T07:58:00+08:00</updated>
    <id>http://lingceng.github.io/blog/2014/03/17/basics-about-minitest</id>
    <content type="html"><![CDATA[<ul>
<li>home :: <a href="https://github.com/seattlerb/minitest">https://github.com/seattlerb/minitest</a></li>
<li>rdoc :: <a href="http://docs.seattlerb.org/minitest">http://docs.seattlerb.org/minitest</a></li>
<li>vim  :: <a href="https://github.com/sunaku/vim-ruby-minitest">https://github.com/sunaku/vim-ruby-minitest</a></li>
</ul>


<p>With Ruby 1.9, MiniTest entered standard lib.
MiniTest is pretty small and readable, here is all source file list:</p>

<blockquote><p>lib:
hoe  minitest</p>

<p>lib/hoe:
minitest.rb</p>

<p>lib/minitest:
autorun.rb  benchmark.rb  hell.rb  mock.rb  parallel_each.rb  pride.rb  spec.rb  unit.rb</p></blockquote>

<h3>Assert Methods</h3>

<p>See  Minitest::Assertions doc or unit.rb source</p>

<pre><code>assert assert_equal assert_raises
capture_io
refute refute_empty
...
</code></pre>

<h3>Specs Expections</h3>

<p>See Minitest::Expectations doc or spec.rb source</p>

<pre><code>must_be must_be_close_to
wont_be_empty
...
</code></pre>

<p>Most methods just redirect to assert methods internally.
<strong>describe</strong> method is added to <strong>Kernel</strong> to start the DSL road;
expectations method is added to <strong>Object</strong></p>

<pre><code>class Object
  include MiniTest::Expectations unless ENV["MT_NO_EXPECTATIONS"]
end
</code></pre>

<h3>Simple Start</h3>

<p>Given that you&rsquo;d like to test the following class:</p>

<pre><code>class Meme
  def i_can_has_cheezburger?
    "OHAI!"
  end

  def will_it_blend?
    "YES!"
  end
end
</code></pre>

<p>Unit tests</p>

<pre><code>require 'minitest/autorun'

class TestMeme &lt; MiniTest::Unit::TestCase
  def setup
    @meme = Meme.new
  end

  def test_that_kitty_can_eat
    assert_equal "OHAI!", @meme.i_can_has_cheezburger?
  end

  def test_that_it_will_not_blend
    refute_match /^no/i, @meme.will_it_blend?
  end

  def test_that_will_be_skipped
    skip "test this later"
  end
end
</code></pre>

<p>Specs</p>

<pre><code># the following have required in autorun
# no need to repeat !
# require 'minitest/unit'
# require 'minitest/spec'
# require 'minitest/mock'

require 'minitest/autorun'

describe Meme do
  before do
    @meme = Meme.new
  end

  describe "when asked about cheeseburgers" do
    it "must respond positively" do
      @meme.i_can_has_cheezburger?.must_equal "OHAI!"
    end
  end

  describe "when asked about blending possibilities" do
    it "won't say no" do
      @meme.will_it_blend?.wont_match /^no/i
    end
  end
end
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[vim tips]]></title>
    <link href="http://lingceng.github.io/blog/2014/03/14/vim-tips/"/>
    <updated>2014-03-14T22:39:00+08:00</updated>
    <id>http://lingceng.github.io/blog/2014/03/14/vim-tips</id>
    <content type="html"><![CDATA[<p>HERE IS MY <a href="https://gist.github.com/lingceng/6097985">vimrc</a></p>

<h3>wonderful block insert</h3>

<pre><code>in Visual block mode:
|v_b_I|    I    insert the same text in front of all the selected lines
|v_b_A|    A    append the same text after all the selected lines
</code></pre>

<h3>search word under cursor</h3>

<pre><code>* to search current word, n to next, N to previous
</code></pre>

<h3>arround tag</h3>

<pre><code>:help v_a
at  # arround tag
it  # inner tag
</code></pre>

<h3>use mark</h3>

<pre><code>ma # mark a
`a # go to a
`A # go to A between buffers
</code></pre>

<!--more-->


<h3>autocomplete with filesystem</h3>

<pre><code>ctrl-x ctrl-f
</code></pre>

<h3>jump between windows</h3>

<pre><code>:help window

# make the only window
CTRL-W o

# split
CTRL-W s
# split vertically
CTRL-W v

# navigate with h j k l
# go to left
CTRL-W h

# resize with &lt; &gt; + -
# add 10 width
CTRL-W 10&gt;
</code></pre>

<h3>show white space</h3>

<pre><code>:set list

# close list
:set nolist
</code></pre>

<h3>buffer change</h3>

<pre><code>CTRL-I
CTRL-O
</code></pre>

<h3>scroll page</h3>

<pre><code>N  CTRL-D   window N lines Downwards (default: 1/2 window)
N  CTRL-U   window N lines Upwards (default: 1/2 window)
</code></pre>

<h3>set highlight when search</h3>

<pre><code>set hlsearch
set nohlsearch
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[git get start]]></title>
    <link href="http://lingceng.github.io/blog/2014/03/13/git-get-start/"/>
    <updated>2014-03-13T07:21:00+08:00</updated>
    <id>http://lingceng.github.io/blog/2014/03/13/git-get-start</id>
    <content type="html"><![CDATA[<p>config</p>

<pre><code>git config --global user.name "John Doe"
git config --global user.email "johndoe@example.com"
</code></pre>

<p>how to get help</p>

<pre><code>git config --help
git help config
man git-config
</code></pre>

<p>start up</p>

<pre><code>git init
git add .
git commit -m "Depot Scaffold"

add and commit
git commit -a -m "Depot Scaffold"
</code></pre>

<p>compare with version before last commit and last commit</p>

<pre><code>git diff HEAD^ HEAD

# show diff stat
git diff --stat

# show the tree-like view
git log --graph --oneline --all
</code></pre>

<p>specify the file path</p>

<pre><code>git diff HEAD^ HEAD app/models/product.rb
</code></pre>

<p>git ammend the last commit</p>

<pre><code>git commit -amend
</code></pre>

<p>powerful edit commit command</p>

<pre><code>git rebase --interactive HEAD^5
</code></pre>

<p>git include delelted files</p>

<pre><code>git add -A
</code></pre>

<p>Creates a remote named &ldquo;origin&rdquo; pointing at your GitHub repository</p>

<pre><code>git remote add origin https://github.com/username/Hello-World.git
</code></pre>

<p>Sends your commits in the &ldquo;master&rdquo; branch to GitHub</p>

<pre><code>git push origin master
</code></pre>

<p>pull down changes</p>

<pre><code>git pull orgin master
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Run Cron Every 5 Hours]]></title>
    <link href="http://lingceng.github.io/blog/2013/11/30/run-cron-every-5-hours/"/>
    <updated>2013-11-30T16:56:00+08:00</updated>
    <id>http://lingceng.github.io/blog/2013/11/30/run-cron-every-5-hours</id>
    <content type="html"><![CDATA[<p>> crontab -e</p>

<figure class='code'><figcaption><span>Run Cron Every 5 Hours </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c"># set the shell</span>
</span><span class='line'><span class="nv">SHELL</span><span class="o">=</span>/bin/sh
</span><span class='line'><span class="nv">PATH</span><span class="o">=</span>/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
</span><span class='line'>
</span><span class='line'><span class="c"># m h dom mon dow usercommand</span>
</span><span class='line'>0 */5 * * * /path/hello.sh &gt;&gt; /path/hello.log 2&gt;&amp;1
</span></code></pre></td></tr></table></div></figure>


<h4>Setting the PATH is Always Necessary</h4>

<p><em>Crontab ignores login configuration</em>, which leads to a command not found.
I have tested <em>env</em> command with crontab on my Ubuntu12.04 and I got the following result:</p>

<pre><code>HOME=/home/lingceng
LOGNAME=lingceng
PATH=/usr/bin:/bin
LANG=en_US.UTF-8
SHELL=/bin/sh
PWD=/home/lingceng
</code></pre>

<h4>Not Really Every 5 Hours</h4>

<p>The demo shell script <strong>just runs at 0, 5, 15, 20 o&#8217;clock</strong>, 20 to 0 is just 4 hours.</p>

<h4>Check Cron log</h4>

<p>Cron log default put <em>/var/log/syslog</em>, use following command to monitor it:</p>

<pre><code>tail -f /var/log/syslog | grep CRON
</code></pre>

<h4>Get More Help</h4>

<p>> <a href="http://unixhelp.ed.ac.uk/CGI/man-cgi?crontab+5">man 5 crontab</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello World]]></title>
    <link href="http://lingceng.github.io/blog/2013/10/08/hello-world/"/>
    <updated>2013-10-08T13:41:00+08:00</updated>
    <id>http://lingceng.github.io/blog/2013/10/08/hello-world</id>
    <content type="html"><![CDATA[<p>Hello everyone! Here&rsquo;s my first post on my blog!</p>
]]></content>
  </entry>
  
</feed>
