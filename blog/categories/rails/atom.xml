<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: rails | Lingceng's Blog]]></title>
  <link href="http://lingceng.github.io/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://lingceng.github.io/"/>
  <updated>2017-06-09T01:19:42+08:00</updated>
  <id>http://lingceng.github.io/</id>
  <author>
    <name><![CDATA[Lingceng]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Upgrade MySQL With Docker]]></title>
    <link href="http://lingceng.github.io/blog/2017/06/08/running-multiple-mysql-instances-on-one-machine/"/>
    <updated>2017-06-08T23:18:00+08:00</updated>
    <id>http://lingceng.github.io/blog/2017/06/08/running-multiple-mysql-instances-on-one-machine</id>
    <content type="html"><![CDATA[<h3>The search problem</h3>

<p>Recently a friend and I made <a href="http://www.cookacg.com">a comic App</a>.
I crawled about 70,000 comics and saved them into MySQL.
Search for comic name starts to slow down.
It takes about 2000ms.</p>

<pre><code>SELECT `comics`.* FROM `comics` WHERE `comics`.`name` LIKE '%text%' LIMIT 21 OFFSET 0
</code></pre>

<p>I have added an index for name field.
But an index won&rsquo;t help text matching with a leading wildcard, an index can be used for:</p>

<pre><code>LIKE 'text%'
</code></pre>

<p>The query gets much faster with &lsquo;name&rsquo; index, but comic name such as &ldquo;hitext&rdquo; won&rsquo;t match.
It&rsquo;s not the solution.</p>

<p>I find out, that the same query is much faster on my MacBook, which only takes about 200ms.
Here&rsquo;s the diff:</p>

<pre><code>EVN        | CPU                   | Memory | OS           | MySQL Version
---        | ---                   | ---    | ---          | ---
MacBook    | 2.7 GHz Intel Core i5 | 8G     | MacOS Sierra | 5.7.17
Production | 2.6 GHZ 1 Core        | 2G     | CentOS 6.5   | 5.1.73
</code></pre>

<p>After some tests, I find out MySQL Version is the key point.
Why 5.7 is so much faster than 5.1? I don&rsquo;t know.</p>

<h3>Try to upgrade MySQL</h3>

<p>So I need to upgrade MySQL from 5.1 to 5.7.
I have 3 choices:</p>

<ul>
<li>Use mysql_upgrade</li>
<li>Install MySQL5.7 manually on the same machine and import data</li>
<li>Install MySQL5.7 in docker and import data</li>
</ul>


<p>Install MySQL.7 in docker seems much safer and simpler.
I tried to install the latest stable docker but failed, as the lastest Docker CE is only supported on CentOS 7.3 64-bit.
I installed the <a href="https://docs.docker.com/v1.7/docker/installation/centos/">docker1.7</a> which is supported on CentOS6.5.</p>

<p>Install MySQL and publish to host port 6603:</p>

<pre><code>sudo docker run --detach --name=comic-mysql --env="MYSQL_ROOT_PASSWORD=mypassword" --publish 6603:3306 mysql
</code></pre>

<p>Connect with host MySQL client, it works:</p>

<pre><code>mysql -uroot -p -h 127.0.0.1 -P 6603
</code></pre>

<p>Create database:</p>

<pre><code>CREATE DATABASE comic_production CHARACTER SET utf8 COLLATE utf8_general_ci;
</code></pre>

<p>Import sql.gz file:</p>

<pre><code>zcat ~/backup/comic_production.20170606112459.sql.gz  | sudo docker exec -i comic-mysql mysql -uroot -pmypassword comic_production
</code></pre>

<p>Config my rails database.yml:</p>

<pre><code>default: &amp;default
  adapter: mysql2
  pool: 5
  username: root
  password: mypassword
  host: 127.0.0.1
  port: 6603
</code></pre>

<h3>References</h3>

<ul>
<li><a href="https://stackoverflow.com/questions/2042269/how-to-speed-up-select-like-queries-in-mysql-on-multiple-columns">https://stackoverflow.com/questions/2042269/how-to-speed-up-select-like-queries-in-mysql-on-multiple-columns</a></li>
<li><a href="https://dev.mysql.com/doc/refman/5.7/en/multiple-servers.html">https://dev.mysql.com/doc/refman/5.7/en/multiple-servers.html</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Migrate Legacy Data To Anthother Rails Project: Practical Tips About Using ActiveRecord]]></title>
    <link href="http://lingceng.github.io/blog/2016/03/18/migrate-legacy-data-to-anthother-rails-project-practical-tips-about-using-activerecord/"/>
    <updated>2016-03-18T20:38:00+08:00</updated>
    <id>http://lingceng.github.io/blog/2016/03/18/migrate-legacy-data-to-anthother-rails-project-practical-tips-about-using-activerecord</id>
    <content type="html"><![CDATA[<p>I migrated legacy data from one Rails project to its refactored Rails project
recently. I&rsquo;ll share some tips while I&rsquo;m doing this job.</p>

<p>I fetched the legacy data directly from old DB and then save into new DB in a
rake task. I used following code to connect the old DB:</p>

<pre><code>class DB &lt; ActiveRecord::Base
  self.abstract_class = true
  if ENV['DEBUG']
    self.logger = Logger.new(STDOUT)
  end

  establish_connection adapter: 'mysql2', encoding: 'utf8',
    host: '127.0.0.1', port: '3306', database: 'databasename', 
    username: 'username'
end
</code></pre>

<p>Then select result with raw SQL by using <code>select_all</code> method</p>

<pre><code>DB.connection.select_all("select * from users").each do |user|
  record = OpenStruct.new(record)
  new = UserInNewDB.find_or_initialize_by(id: record.id)
  user.attributes = record.to_h.slice(*%i[ phone name created_at updated_at])
  user.save! if user.changed?
end
</code></pre>

<p>But it&rsquo;s hard while doing some complicated query with raw SQL. So I tried to
copy models in old project to new one. To keep new project clean, I mainly
reproduced the relations between models.</p>

<pre><code>class User &lt; DB
  has_many :orders
end

class Order &lt; DB
  belongs_to :user
end
</code></pre>

<p>Then life gets better. I can do queries with ActiveRecord model and get all the
benefits.</p>

<pre><code>User.find_each do |record|
  # Do the migration
end
</code></pre>

<h2>Tip0 Skip some callback</h2>

<pre><code>Process.skip_callback(:save, :before, :log_changes)
</code></pre>

<h2>Tip1 Skip some validation</h2>

<pre><code>if new.invalid? &amp;&amp; 1 == new.errors.size &amp;&amp; new.errors[:batch_id]
  new.save!(validate: false)
else
  new.save!
end
</code></pre>

<h2>Tip2 Cache basic table in a hash</h2>

<pre><code>brands = Brand.all.index_by(&amp;:name)
Order.find_each do |record|
  new = NewOrder.find_or_initialize_by(id: record.id)
  new.brand = brands[name]
  new.save!
end
</code></pre>

<h2>Tip3 Show current progress</h2>

<pre><code>def show_process(name, total, index)
  printf "%s %.2f %%, %d / %d\r", name, index * 100.0 / total, index, total
end
</code></pre>

<h2>Tip4 Find out records with no associated records</h2>

<pre><code>Settlement.joins("left join orders on orders.settlement_id = settlements.id").
  where("orders.id is null")
</code></pre>

<h2>Tip5 Update column without triggering callbacks</h2>

<pre><code>PayRecord.find(10059).update_column(:amount, 5986)
</code></pre>

<h2>Tip6 Do nested inner joins with ActiveRecord</h2>

<pre><code>query = ProcessesChange.joins(process: [:technic, batch: :workgroup])
</code></pre>

<h2>Tip7 Use <strong>squeel</strong> to do outer join</h2>

<pre><code>User.joins{recharges.outer}
</code></pre>

<h2>Tip8 Use <code>pluck</code> method to return array of data</h2>

<pre><code>Order.joins(:item).group('items.brand').pluck("items.brand, count(orders.id) as order_count")
</code></pre>

<h2>Tip9 Use Mysql <code>GROUP_CONCAT</code> to return all items in a group</h2>

<pre><code>sql =  Settlement.joins(:orders).group(:id).
  having("sum(orders.final_price) != sum(settlements.amount)").
  select("settlements.id, GROUP_CONCAT(orders.number),
  GROUP_CONCAT(orders.final_price), MIN(settlements.amount)").to_sql

Settlement.connection.select_all(sql)
</code></pre>

<h2>Tip10 Manage rake task dependencies with an empty task</h2>

<pre><code>task :user_module =&gt; [:users, :sources, :customers, :operators]
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dive Into The Source Code: Find More Information Besides The Doc]]></title>
    <link href="http://lingceng.github.io/blog/2016/01/18/dive-into-the-source-code-find-more-information-besides-the-doc/"/>
    <updated>2016-01-18T21:27:00+08:00</updated>
    <id>http://lingceng.github.io/blog/2016/01/18/dive-into-the-source-code-find-more-information-besides-the-doc</id>
    <content type="html"><![CDATA[<p>We can use <strong>pry</strong> and  <strong>pry-byebug</strong> gem to help us dive into the source code.</p>

<h3>Let&rsquo;s see an example about <code>to_json</code> vs <code>as_json</code></h3>

<p>I found there&rsquo;s a <code>to_json</code> and <code>as_json</code> method for active record query result.
<code>to_json</code> returns String of json.
<code>as_json</code> returns a hash representing the model.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;blockquote&gt;&lt;p&gt;Order.where(number: &amp;ldquo;201504211405490&amp;rdquo;).to_json&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;=&gt;</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">[</span><span class="p">{\</span><span class="s2">&quot;production_status\&amp;rdquo;:\&amp;ldquo;idle\&amp;rdquo;,\&amp;ldquo;id\&amp;rdquo;:11,\&amp;ldquo;number\&amp;rdquo;:\&amp;ldquo;201504211405490\&amp;rdquo;}]&quot;</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;Order.where(number: &amp;ldquo;201504211405490&amp;rdquo;).to_json.class&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;=&gt;</span> <span class="nb">String</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;Order.where(number: &amp;ldquo;201504211405490&amp;rdquo;).as_json&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;=&gt;</span> <span class="o">[</span><span class="p">{</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">production_status</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">=&gt;&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">idle</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="nb">id</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">=&gt;</span><span class="mi">11</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">number</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">=&gt;&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="mi">201504211405490</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;}</span><span class="o">]&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;Order.where(number: &amp;ldquo;201504211405490&amp;rdquo;).as_json.class&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;=&gt;</span> <span class="no">Hash</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p></blockquote>

<p>I find that <code>as_json</code> can accepts some optons.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;blockquote&gt;&lt;p&gt;Order.where(number: &amp;ldquo;201504211405490&amp;rdquo;).as_json(only: :number)&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;=&gt;</span> <span class="o">[</span><span class="p">{</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">number</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">=&gt;&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="mi">201504211405490</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;}</span><span class="o">]&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p></blockquote>

<p>But one day I found somebody used similar options with <code>to_json</code> method.
I searched the doc. No doc says <code>to_json</code> can do things like following:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;blockquote&gt;&lt;p&gt;Order.where(number: &amp;ldquo;201504211405490&amp;rdquo;).to_json(only: :number)&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;=&gt;</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">[</span><span class="p">{\</span><span class="s2">&quot;number\&amp;rdquo;:\&amp;ldquo;201504211405490\&amp;rdquo;}]&quot;</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p></blockquote>

<p>But the code above actually works.
Is <code>to_json</code> uses <code>as_json</code> under the hood?</p>

<h3>Dive into the source</h3>

<p>Now we can check the source code to find the answer.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;blockquote&gt;&lt;p&gt;$ Order.where(number: &amp;ldquo;201504211405490&amp;rdquo;).to_json&lt;/</span><span class="nb">p</span><span class="o">&gt;&lt;</span><span class="sr">/blockquote&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;From: /</span><span class="no">Users</span><span class="o">/</span><span class="n">lingceng</span><span class="o">/.</span><span class="n">rvm</span><span class="o">/</span><span class="n">gems</span><span class="o">/</span><span class="n">ruby</span><span class="o">-</span><span class="mi">2</span><span class="o">.</span><span class="mi">2</span><span class="o">.</span><span class="mi">0</span><span class="vi">@baozheng</span><span class="o">/</span><span class="n">gems</span><span class="o">/</span><span class="n">activesupport</span><span class="o">-</span><span class="mi">4</span><span class="o">.</span><span class="mi">2</span><span class="o">.</span><span class="mi">0</span><span class="o">/</span><span class="n">lib</span><span class="o">/</span><span class="n">active_support</span><span class="o">/</span><span class="n">core_ext</span><span class="o">/</span><span class="n">object</span><span class="o">/</span><span class="n">json</span><span class="o">.</span><span class="n">rb</span> <span class="err">@</span> <span class="n">line</span> <span class="mi">31</span><span class="p">:</span>
</span><span class='line'><span class="ss">Owner</span><span class="p">:</span> <span class="no">Object</span>
</span><span class='line'><span class="ss">Visibility</span><span class="p">:</span> <span class="kp">public</span>
</span><span class='line'><span class="no">Number</span> <span class="n">of</span> <span class="ss">lines</span><span class="p">:</span> <span class="mi">9</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;def to_json_with_active_support_encoder(options = nil)</span>
</span><span class='line'><span class="sr">  if options.is_a?(::JSON::State)&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="c1"># Called from JSON.{generate,dump}, forward it to JSON gem&#39;s to_json</span>
</span><span class='line'><span class="nb">self</span><span class="o">.</span><span class="n">to_json_without_active_support_encoder</span><span class="p">(</span><span class="n">options</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">else</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;# to_json is being invoked directly, use ActiveSupport&#39;s encoder</span>
</span><span class='line'><span class="sr">ActiveSupport::JSON.encode(self, options)</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end</span>
</span><span class='line'><span class="sr">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Then we edit the method and add a <strong>binding.pry</strong> before the <code>if options.is_a?(::JSON::State)</code> line.
<strong>Remember to recover the change after debug.</strong></p>

<pre><code>&gt; edit Order.where(number: "201504211405490").to_json
</code></pre>

<p>Then run code again:</p>

<pre><code>&gt; Order.where(number: "201504211405490").to_json
</code></pre>

<p>Now we&rsquo;ll get into <code>to_json_with_active_support_encoder</code> method and start to debug.
After some <strong>next</strong> and <strong>step</strong> comand.
We can find that <code>to_json</code> uses ActiveSupport::JSON.encode, which uses <code>as_json</code>.</p>

<pre><code># /lib/active_support/json/encoding.rb#34
# Encode the given object into a JSON string
def encode(value)
  stringify jsonify value.as_json(options.dup)
end
</code></pre>

<p>Yes! <code>to_json</code> uses <code>as_json</code>. We find the answer. So we can use to_json(only: :number) with
confidence.</p>

<h3>Conclusion</h3>

<p>Pry and pry-byebug provides many useful commands.
Using these commands can help to find the definition of a method, track the call stacks, understand the source structure.</p>

<p>This is beauty of open source.
Do not limit yourself.
Dive into the code and get your information.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Diffs Between FormHelper and FormTagHelper in Rails]]></title>
    <link href="http://lingceng.github.io/blog/2016/01/11/diffs-between-formhelper-and-formtaghelper-in-rails/"/>
    <updated>2016-01-11T13:10:00+08:00</updated>
    <id>http://lingceng.github.io/blog/2016/01/11/diffs-between-formhelper-and-formtaghelper-in-rails</id>
    <content type="html"><![CDATA[<p>We can use <strong>form_for</strong> or <strong>form_tag</strong> to build forms in Rails.
But their parameters act differently, which always bites me.</p>

<p>For example, I have to wrap html options into a <code>html</code> key when I change from
form_tag to form_for.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">=</span> <span class="n">form_tag</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="o">/</span><span class="n">techloglogies</span><span class="o">/</span><span class="n">board</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span> <span class="nb">method</span><span class="p">:</span> <span class="ss">:get</span><span class="p">,</span> <span class="ss">class</span><span class="p">:</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">form</span><span class="o">-</span><span class="n">inline</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;= form_for @search, url: &amp;lsquo;/</span><span class="n">techloglogies</span><span class="o">/</span><span class="n">board</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span> <span class="nb">method</span><span class="p">:</span> <span class="ss">:get</span><span class="p">,</span> <span class="ss">html</span><span class="p">:</span> <span class="p">{</span> <span class="ss">class</span><span class="p">:</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">form</span><span class="o">-</span><span class="n">inline</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>And as the 3rd parameter of <code>f.select</code>  is <em>options</em> than <em>html_options</em>.
So I have to add an empty hash <code>{}</code> there to skip it.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">=</span> <span class="n">select_tag</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">step</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span>
</span><span class='line'>  <span class="n">options_for_select</span><span class="p">(</span><span class="ss">Order</span><span class="p">:</span><span class="ss">:PURE_STEPS</span><span class="o">.</span><span class="n">invert</span><span class="p">,</span> <span class="n">params</span><span class="o">[</span><span class="ss">:step</span><span class="o">]</span><span class="p">),</span>
</span><span class='line'>  <span class="ss">class</span><span class="p">:</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">form</span><span class="o">-</span><span class="n">control</span> <span class="n">input</span><span class="o">-</span><span class="n">sm</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span> <span class="ss">style</span><span class="p">:</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="ss">width</span><span class="p">:</span> <span class="mi">100</span><span class="n">px</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;= f.select :step, Order::PURE_STEPS.invert, {},</span>
</span><span class='line'><span class="sr">  class: &amp;lsquo;form-control input-sm&amp;rsquo;, style: &amp;lsquo;width: 100px&amp;rsquo;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Why they acts differently? Isn&rsquo;t f.select built on select_tag?</h2>

<p><strong>The short answer is NO.</strong> f.select is not built on select_tag.
Let&rsquo;s dig into the source.</p>

<h3>Here&rsquo;s where form_for defined.</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">ActionView::Helper::FormHelper</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  def text_field(object_name, method, options = {})&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="ss">Tags</span><span class="p">:</span><span class="ss">:TextField</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">object_name</span><span class="p">,</span> <span class="nb">method</span><span class="p">,</span> <span class="nb">self</span><span class="p">,</span> <span class="n">options</span><span class="p">)</span><span class="o">.</span><span class="n">render</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  def form_for(&amp;hellip;)&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>In FormHelper above also defined a class named ActionView::Helpers::FormBuilder.
The form_for uses the FormBuilder.</p>

<p>Most methods in FormHelper are delegated by FormBuilder.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;in FormBuilder&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="c1">#{selector}(method, options = {})  # def text_field(method, options = {})</span>
</span><span class='line'>  <span class="vi">@template</span><span class="o">.</span><span class="n">send</span><span class="p">(</span>                      <span class="c1">#   @template.send(&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="c1">#{selector.inspect},               #     &quot;text_field&quot;,</span>
</span><span class='line'><span class="vi">@object_name</span><span class="p">,</span>                      <span class="c1">#     @object_name,</span>
</span><span class='line'><span class="nb">method</span><span class="p">,</span>                            <span class="c1">#     method,</span>
</span><span class='line'><span class="n">objectify_options</span><span class="p">(</span><span class="n">options</span><span class="p">))</span>        <span class="c1">#     objectify_options(options))</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="k">end</span>                                    <span class="c1"># end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Unlike text_field, select helper defined in ActionView::Helpers::FormOptionsHelper.
And a select method in FormBuilder delegates the FormOptionsHelper#select.</p>

<p>text_field or select finnally use classes under module ActionView::Helpers::Tags</p>

<h3>FormTag and SelectTag are defined in ActionView::Helper::FormTagHelper</h3>

<p><strong>ActionView::Helper::FormTagHelper seems totally another implement.</strong>
Most tags helper are component directly in the methods. eg.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">text_field_tag</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="n">value</span> <span class="o">=</span> <span class="kp">nil</span><span class="p">,</span> <span class="n">options</span> <span class="o">=</span> <span class="p">{})</span>
</span><span class='line'>  <span class="n">tag</span> <span class="ss">:input</span><span class="p">,</span> <span class="p">{</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">type</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span> <span class="o">=&gt;</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">text</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="nb">name</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span> <span class="o">=&gt;</span> <span class="nb">name</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="nb">id</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span> <span class="o">=&gt;</span> <span class="n">sanitize_to_id</span><span class="p">(</span><span class="nb">name</span><span class="p">),</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">value</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span> <span class="o">=&gt;</span> <span class="n">value</span> <span class="p">}</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="n">options</span><span class="o">.</span><span class="n">stringify_keys</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>select_tag and FormBuilder#select do dot shere the implement.
They implement the include_blank and other options separately.
Is it a historical reason?</p>

<h2>How to avoid converts?</h2>

<p><a href="https://www.reinteractive.net/posts/158-form-objects-in-rails">Use form object</a> to always use form_for style.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Query Date Range with Ransack]]></title>
    <link href="http://lingceng.github.io/blog/2015/12/28/query-date-range-with-ransack/"/>
    <updated>2015-12-28T19:42:00+08:00</updated>
    <id>http://lingceng.github.io/blog/2015/12/28/query-date-range-with-ransack</id>
    <content type="html"><![CDATA[<h3>The Traditional Way</h3>

<p>Here I have a table of change records in my rails app.
And I have added a query for <em>created_at</em> with <a href="https://github.com/activerecord-hackery/ransack">ransack</a>.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>app/controllers/production_status_changes_controller.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">ProductionStatusChangesController</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="no">PlainController</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">index</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;@q = ProductionStatusChange.ransack(params[:q])</span>
</span><span class='line'><span class="sr">@orders = @q.result.includes(:order).page(params[:page]).per(params[:per])</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end</span>
</span><span class='line'><span class="sr">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>app/views/production_status_changes/index.html.erb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='erb'><span class='line'><span class="x">&amp;lt;%= search_form_for @q, url: production_status_changes_path, class: &amp;lsquo;form-inline&amp;rsquo; do |f| </span><span class="err">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  &amp;lt;%=  f.label &amp;lsquo;Create At&amp;rsquo; </span><span class="err">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  &amp;lt;%= f.search_field :created_at_gteq, class: &amp;lsquo;form-control input-sm&amp;rsquo;, &amp;lsquo;datepicker&amp;rsquo; =&gt; true </span><span class="err">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  &amp;lt;%= f.search_field :created_at_lteq, class: &amp;lsquo;form-control input-sm&amp;rsquo;, &amp;lsquo;datepicker&amp;rsquo; =&gt; true </span><span class="err">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">&amp;lt;% end </span><span class="err">%&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>The Problem</h3>

<p>Everything works fine until users start to use it.
They are surpised that, when query with &ldquo;2015-01-01&rdquo; and &ldquo;2015-01-01&rdquo;, nothing comes out.</p>

<p>Certainly there&rsquo;s nothing between &lsquo;2015-01-01 00:00&rsquo; and &lsquo;2015-01-01 00:00&rsquo;.
But our users don&rsquo;t think so.
They shout that there is a whole day from 2015-01-01 to 2015-01-01!</p>

<h3>Direct solution</h3>

<p>OK. Users are gods. So I add some codes in my controller:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>app/controllers/production_status_changes_controller.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">index</span>
</span><span class='line'>  <span class="n">params</span><span class="o">[</span><span class="ss">:q</span><span class="o">]</span> <span class="o">||=</span> <span class="p">{}</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">params</span><span class="o">[</span><span class="ss">:q</span><span class="o">][</span><span class="ss">:created_at_lteq</span><span class="o">].</span><span class="n">present?</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;params[:q][:created_at_lteq] = params[:q][:created_at_lteq].to_date.end_of_day</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end</span>
</span><span class='line'><span class="sr">  @q = ProductionStatusChange.ransack(params[:q])</span>
</span><span class='line'><span class="sr">  @orders = @q.result.includes(:order).page(params[:page]).per(params[:per])</span>
</span><span class='line'><span class="sr">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The <em>created_at_lteq</em> will convert to &lsquo;2015-01-01 23:59&rsquo;.</p>

<h3>DRY</h3>

<p>I customed the ransack predicates to avoid duplication.
So I can just write the view like following:</p>

<script src="https://gist.github.com/lingceng/65c58512d9bbb50799c7.js"></script>


<h3>Maybe Another Way</h3>

<p>Maybe we can change the js datepicker to set time to 59:59 by default.
I use <a href="http://eonasdan.github.io/bootstrap-datetimepicker/">bootstrap-datetimepicker</a>.
I find the javascript solution:</p>

<pre><code>= hidden_field_tag 'q[created_at_lteq]', params[:q].try(:[], :created_at_lteq)
= date_field_tag '', params[:q].try(:[], :created_at_lteq).to_s.sub(/ .+/, ''), onchange: "$(this).prev().val($(this).val() != '' ? $(this).val() + ' 23:59:59' : '')"
</code></pre>

<h3>One Thing More</h3>

<p>Following make query in one day more convenient.</p>

<p>```ruby
class ProductionStatusChange &lt; ActiveRecord::Base
  ransacker :created_on do</p>

<pre><code>Arel.sql("DATE(#{table_name}.created_at)")
</code></pre>

<p>  end
end</p>

<p>@q = ProductionStatusChange.ransack(created_on: &lsquo;2016-01-01&rsquo;)
```</p>
]]></content>
  </entry>
  
</feed>
