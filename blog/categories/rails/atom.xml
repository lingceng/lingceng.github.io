<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: rails | Lingceng's Blog]]></title>
  <link href="https://lingceng.github.io/blog/categories/rails/atom.xml" rel="self"/>
  <link href="https://lingceng.github.io/"/>
  <updated>2017-08-03T21:16:17+08:00</updated>
  <id>https://lingceng.github.io/</id>
  <author>
    <name><![CDATA[Lingceng]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Rails Helper Magic]]></title>
    <link href="https://lingceng.github.io/blog/2017/08/03/rails-helper-magic/"/>
    <updated>2017-08-03T21:00:00+08:00</updated>
    <id>https://lingceng.github.io/blog/2017/08/03/rails-helper-magic</id>
    <content type="html"><![CDATA[<h3>Rails view helpers default value magic</h3>

<p>Following will set default value for <em>:first_name</em> field if an instance variable @person present.</p>

<pre><code>&lt;%= form_for :person do |f| %&gt;
  First name: &lt;%= f.text_field :first_name %&gt;&lt;br /&gt;
&lt;% end %&gt;
</code></pre>

<p>Actually the following will set the default value too.</p>

<pre><code>First name: &lt;%= text_field :person, :first_name %&gt;&lt;br /&gt;
</code></pre>

<p>The magic is hidden in <em>retrieve_object</em> method in <em>lib/action_view/helpers/tags/base.rb</em>.
The @template_object is the view context here.</p>

<pre><code>def retrieve_object(object)
  if object
    object
  elsif @template_object.instance_variable_defined?("@#{@object_name}")
    @template_object.instance_variable_get("@#{@object_name}")
  end
  ...
end
</code></pre>

<p>Most form helpers such as <em>text_field</em>, <em>check_box</em> and <em>select</em>, is based on <em>Helpers:Tags::Base</em>.
So the magic works for them too.</p>

<h3>Rails helpers has two similar definitions</h3>

<p>There are always two similar definitions for most view helpers.
Such as <em>check_box</em> and <em>select</em>.</p>

<p>One is in <strong>ActionView::Helpers::[Some]Helper</strong>.</p>

<pre><code>check_box(object_name, method, options = {}, checked_value = "1", unchecked_value = "0")
</code></pre>

<p>The other is in <strong>ActionView::Helpers::FormBuilder</strong>.</p>

<pre><code>check_box(method, options = {}, checked_value = "1", unchecked_value = "0")
</code></pre>

<p>The difference is the first definition needs to specify the <strong>object_name</strong>.</p>

<p>The truth is most helpers provide a wrapper for <strong>FormBuilder</strong> class.</p>

<p>See the <strong>check_box</strong> in <strong>FormBuilder</strong> below.
The <strong>@template</strong> is the view context here.
The <strong>objectify_options</strong> will pass in the current object of the form.</p>

<pre><code>def check_box(method, options = {}, checked_value = "1", unchecked_value = "0")
  @template.check_box(@object_name, method, objectify_options(options), checked_value, unchecked_value)
end
</code></pre>

<p>By the way, helpers ends with &lsquo;tag&rsquo;, such as <strong>check_box_tag</strong> and <strong>select_tag</strong>, have another implement.  They have much different usage.</p>

<h3>Difference between form_for and fields_for</h3>

<p>Both are helpers and very similar.
<strong>form_for</strong> handles more options for URL and methods.</p>

<pre><code>def form_for(record, options = {}, &amp;block)
  ...
  builder = instantiate_builder(object_name, object, options)
  output  = capture(builder, &amp;block)
  form_tag(options[:url] || {}, html_options) { output }
end

def fields_for(record_name, record_object = nil, options = {}, &amp;block)
  builder = instantiate_builder(record_name, record_object, options)
  capture(builder, &amp;block)
end
</code></pre>

<p>But <strong>fields_for</strong> also defined in FormBuilder class while <strong>form_for</strong> did not.
So we can use fields_for as following:</p>

<pre><code>f.fields_for :orders do |order_form|
end
</code></pre>

<p>The FormBuilder#fields_for handle some details about <strong>accepts_nested_attributes_for</strong>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Understand Capistrano]]></title>
    <link href="https://lingceng.github.io/blog/2017/07/29/understand-capistrano/"/>
    <updated>2017-07-29T19:00:00+08:00</updated>
    <id>https://lingceng.github.io/blog/2017/07/29/understand-capistrano</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/capistrano/capistrano">Capistrano</a> is based on <strong>Rake</strong> and <strong>SSHKit</strong>.</p>

<p>Capistrano adds some DSL to <strong>Rake</strong>, such as <code>on roles(:app)</code>, <code>within release_path</code> and <code>with rails_env: fetch(:rails_env)</code>.
<code>cap -T</code> can list all Capistrano tasks, which is similar with <code>rake -T</code>. Capistrano executes commands with <strong>SSHKit</strong>.</p>

<p>When we run <code>cap install STAGE=feature</code>. It generates three files:</p>

<pre><code>./Capfile
./config/deploy.rb
./config/deploy/feature.rb
</code></pre>

<p>Capistrano first load <em>Capfile</em>, then <em>deploy.rb</em> and last <em>feature.rb</em>.</p>

<h3>Lazy set the configuration</h3>

<p>See code below.
Things goes wrong if you set <strong>deploy_to</strong> (shared_path depends on deploy_to) at <em>feature.rb</em>.
You should use a block to do a <strong>lazy set</strong>.</p>

<pre><code># ./config/deploy/stage.rb
set :deploy_to, "/home/develop/#{fetch(:application)}/production"


# ./config/deploy.rb
# WRONG
set :puma_bind, "unix://#{shared_path}/tmp/sockets/#{fetch(:application)}-puma.sock"

# OK
set :puma_bind, -&gt; { "unix://#{shared_path}/tmp/sockets/#{fetch(:application)}-puma.sock" }
</code></pre>

<h3>Custom tasks</h3>

<p>Let&rsquo;s say, we want to start some program after deploy. How to mount the task?<br/>
The <em>lib/capistrano/tasks/framework.rake</em> in Capistrano source has defined the structure.</p>

<pre><code>deploy:starting
deploy:started
deploy:updating
deploy:updated
deploy:publishing
deploy:published
deploy:finishing
deploy:finished
</code></pre>

<p>Here&rsquo;s an example.
The <code>ruby scripts/ctrl_process_accuse.rb restart</code> will be executed after deploy.</p>

<pre><code>namespace :deploy do
  desc "Restart process accuse"
  task :restart_process_accuse do
    on roles(:db) do
      within release_path do
        with rails_env: fetch(:rails_env) do
          execute :ruby, "scripts/ctrl_process_accuse.rb restart"
        end
      end
    end
  end

  after :finished, :restart_process_accuse
end
</code></pre>

<p>Here the generated commands.
I used <strong>capistrano-rvm</strong> which will wrap commands like <em>ruby</em>, <em>gem</em> or <em>rake</em>.</p>

<pre><code>DEBUG [6dfb3053] Command: cd /home/develop/cms/production/releases/20170
729094810 &amp;&amp; ( export RAILS_ENV="production" ; ~/.rvm/bin/rvm default do
 ruby scripts/ctrl_process_accuse.rb restart )
</code></pre>

<p>You can also run the task alone. Option &lsquo;&mdash;trace&rsquo; is to show task invoke details.</p>

<pre><code>rake feature deploy:restart_process_accuse --trace
</code></pre>

<h3>The roles</h3>

<p>The most used roles are: <strong>app, web and db</strong>. Here&rsquo;s some default roles.</p>

<pre><code>plugin                      | default role
---                         - ---
capistrano/puma             | app
capistrano/rails/assets     | web
capistrano/rails/migrations | db
whenever/capistrano         | db
</code></pre>

<p>We often set only one server with role <strong>db</strong>.
So you can specify some tasks that can only run once with <strong>db</strong> role.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Upgrade MySQL With Docker]]></title>
    <link href="https://lingceng.github.io/blog/2017/06/08/upgrade-mysql-with-docker/"/>
    <updated>2017-06-08T23:18:00+08:00</updated>
    <id>https://lingceng.github.io/blog/2017/06/08/upgrade-mysql-with-docker</id>
    <content type="html"><![CDATA[<h3>The search problem</h3>

<p>Recently a friend and I made <a href="http://www.cookacg.com">a comic App</a>.
I crawled about 70,000 comics and saved them into MySQL.
Search for comic name started to slow down.
It takes about 2000ms.</p>

<pre><code>SELECT `comics`.* FROM `comics` WHERE `comics`.`name` LIKE '%text%' LIMIT 21 OFFSET 0
</code></pre>

<p>I had added an index for name field.
But an index won&rsquo;t help text matching with a leading wildcard, an index can be used for:</p>

<pre><code>LIKE 'text%'
</code></pre>

<p>Query with <code>LIKE 'text%'</code> is much faster. But comic name such as &ldquo;sometext&rdquo; won&rsquo;t match.
It does not fit my need.</p>

<p><strong>I found out, that the same query was much faster on my MacBook, which only took about 200ms.</strong>
Here was the difference:</p>

<pre><code>EVN        | CPU                   | Memory | OS           | MySQL Version
---        | ---                   | ---    | ---          | ---
MacBook    | 2.7 GHz Intel Core i5 | 8G     | MacOS Sierra | 5.7.17
Production | 2.6 GHZ 1 Core        | 2G     | CentOS 6.5   | 5.1.73
</code></pre>

<p><strong>After some tests, I found out MySQL Version was the key point.</strong>
Why 5.7 is so much faster than 5.1? I don&rsquo;t know.</p>

<h3>Try to upgrade MySQL</h3>

<p>So I needed to upgrade MySQL from 5.1 to 5.7.
I had 3 choices:</p>

<ul>
<li>Using mysql_upgrade</li>
<li>Installing MySQL5.7 manually on the same machine</li>
<li>Installing MySQL5.7 in docker</li>
</ul>


<p>Installing MySQL.7 in docker seemed much safer and simpler for me.
And docker is an useful tool to help deploying.
<strong>I tried to install the latest stable docker but failed, as the latest Docker CE is only supported on CentOS 7.3 64-bit.</strong>
I installed the <a href="https://docs.docker.com/v1.7/docker/installation/centos/">docker 1.7</a> which is supported on CentOS 6.5.</p>

<p>Run MySQL in docker and publish to host port 6603:</p>

<pre><code>sudo docker run --detach --name=comic-mysql --env="MYSQL_ROOT_PASSWORD=mypassword" --publish 6603:3306 mysql
</code></pre>

<p>Connect MySQL in docker with host MySQL client:</p>

<pre><code>mysql -uroot -p -h 127.0.0.1 -P 6603
</code></pre>

<p>Create database:</p>

<pre><code>CREATE DATABASE comic_production CHARACTER SET utf8 COLLATE utf8_general_ci;
</code></pre>

<p>Import sql.gz file:</p>

<pre><code>zcat ~/backup/comic_production.20170606112459.sql.gz  | sudo docker exec -i comic-mysql mysql -uroot -pmypassword comic_production
</code></pre>

<p>Configure my rails database.yml:</p>

<pre><code>default: &amp;default
  adapter: mysql2
  pool: 5
  username: root
  password: mypassword
  host: 127.0.0.1
  port: 6603
</code></pre>

<p>It worked!
I restarted the rails server, the database changed.
The users got much faster response for searching.</p>

<h3>References</h3>

<ul>
<li><a href="https://stackoverflow.com/questions/2042269/how-to-speed-up-select-like-queries-in-mysql-on-multiple-columns">https://stackoverflow.com/questions/2042269/how-to-speed-up-select-like-queries-in-mysql-on-multiple-columns</a></li>
<li><a href="https://dev.mysql.com/doc/refman/5.7/en/multiple-servers.html">https://dev.mysql.com/doc/refman/5.7/en/multiple-servers.html</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Migrate Legacy Data To Anthother Rails Project: Practical Tips About Using ActiveRecord]]></title>
    <link href="https://lingceng.github.io/blog/2016/03/18/migrate-legacy-data-to-anthother-rails-project-practical-tips-about-using-activerecord/"/>
    <updated>2016-03-18T20:38:00+08:00</updated>
    <id>https://lingceng.github.io/blog/2016/03/18/migrate-legacy-data-to-anthother-rails-project-practical-tips-about-using-activerecord</id>
    <content type="html"><![CDATA[<p>I migrated legacy data from one Rails project to its refactored Rails project
recently. I&rsquo;ll share some tips while I&rsquo;m doing this job.</p>

<p>I fetched the legacy data directly from old DB and then save into new DB in a
rake task. I used following code to connect the old DB:</p>

<pre><code>class DB &lt; ActiveRecord::Base
  self.abstract_class = true
  if ENV['DEBUG']
    self.logger = Logger.new(STDOUT)
  end

  establish_connection adapter: 'mysql2', encoding: 'utf8',
    host: '127.0.0.1', port: '3306', database: 'databasename', 
    username: 'username'
end
</code></pre>

<p>Then select result with raw SQL by using <code>select_all</code> method</p>

<pre><code>DB.connection.select_all("select * from users").each do |user|
  record = OpenStruct.new(record)
  new = UserInNewDB.find_or_initialize_by(id: record.id)
  user.attributes = record.to_h.slice(*%i[ phone name created_at updated_at])
  user.save! if user.changed?
end
</code></pre>

<p>But it&rsquo;s hard while doing some complicated query with raw SQL. So I tried to
copy models in old project to new one. To keep new project clean, I mainly
reproduced the relations between models.</p>

<pre><code>class User &lt; DB
  has_many :orders
end

class Order &lt; DB
  belongs_to :user
end
</code></pre>

<p>Then life gets better. I can do queries with ActiveRecord model and get all the
benefits.</p>

<pre><code>User.find_each do |record|
  # Do the migration
end
</code></pre>

<h2>Tip0 Skip some callback</h2>

<pre><code>Process.skip_callback(:save, :before, :log_changes)
</code></pre>

<h2>Tip1 Skip some validation</h2>

<pre><code>if new.invalid? &amp;&amp; 1 == new.errors.size &amp;&amp; new.errors[:batch_id]
  new.save!(validate: false)
else
  new.save!
end
</code></pre>

<h2>Tip2 Cache basic table in a hash</h2>

<pre><code>brands = Brand.all.index_by(&amp;:name)
Order.find_each do |record|
  new = NewOrder.find_or_initialize_by(id: record.id)
  new.brand = brands[name]
  new.save!
end
</code></pre>

<h2>Tip3 Show current progress</h2>

<pre><code>def show_process(name, total, index)
  printf "%s %.2f %%, %d / %d\r", name, index * 100.0 / total, index, total
end
</code></pre>

<h2>Tip4 Find out records with no associated records</h2>

<pre><code>Settlement.joins("left join orders on orders.settlement_id = settlements.id").
  where("orders.id is null")
</code></pre>

<h2>Tip5 Update column without triggering callbacks</h2>

<pre><code>PayRecord.find(10059).update_column(:amount, 5986)
</code></pre>

<h2>Tip6 Do nested inner joins with ActiveRecord</h2>

<pre><code>query = ProcessesChange.joins(process: [:technic, batch: :workgroup])
</code></pre>

<h2>Tip7 Use <strong>squeel</strong> to do outer join</h2>

<pre><code>User.joins{recharges.outer}
</code></pre>

<h2>Tip8 Use <code>pluck</code> method to return array of data</h2>

<pre><code>Order.joins(:item).group('items.brand').pluck("items.brand, count(orders.id) as order_count")
</code></pre>

<h2>Tip9 Use Mysql <code>GROUP_CONCAT</code> to return all items in a group</h2>

<pre><code>sql =  Settlement.joins(:orders).group(:id).
  having("sum(orders.final_price) != sum(settlements.amount)").
  select("settlements.id, GROUP_CONCAT(orders.number),
  GROUP_CONCAT(orders.final_price), MIN(settlements.amount)").to_sql

Settlement.connection.select_all(sql)
</code></pre>

<h2>Tip10 Manage rake task dependencies with an empty task</h2>

<pre><code>task :user_module =&gt; [:users, :sources, :customers, :operators]
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dive Into The Source Code: Find More Information Besides The Doc]]></title>
    <link href="https://lingceng.github.io/blog/2016/01/18/dive-into-the-source-code-find-more-information-besides-the-doc/"/>
    <updated>2016-01-18T21:27:00+08:00</updated>
    <id>https://lingceng.github.io/blog/2016/01/18/dive-into-the-source-code-find-more-information-besides-the-doc</id>
    <content type="html"><![CDATA[<p>We can use <strong>pry</strong> and  <strong>pry-byebug</strong> gem to help us dive into the source code.</p>

<h3>Let&rsquo;s see an example about <code>to_json</code> vs <code>as_json</code></h3>

<p>I found there&rsquo;s a <code>to_json</code> and <code>as_json</code> method for active record query result.
<code>to_json</code> returns String of json.
<code>as_json</code> returns a hash representing the model.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;blockquote&gt;&lt;p&gt;Order.where(number: &amp;ldquo;201504211405490&amp;rdquo;).to_json&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;=&gt;</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">[</span><span class="p">{\</span><span class="s2">&quot;production_status\&amp;rdquo;:\&amp;ldquo;idle\&amp;rdquo;,\&amp;ldquo;id\&amp;rdquo;:11,\&amp;ldquo;number\&amp;rdquo;:\&amp;ldquo;201504211405490\&amp;rdquo;}]&quot;</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;Order.where(number: &amp;ldquo;201504211405490&amp;rdquo;).to_json.class&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;=&gt;</span> <span class="nb">String</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;Order.where(number: &amp;ldquo;201504211405490&amp;rdquo;).as_json&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;=&gt;</span> <span class="o">[</span><span class="p">{</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">production_status</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">=&gt;&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">idle</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="nb">id</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">=&gt;</span><span class="mi">11</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">number</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">=&gt;&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="mi">201504211405490</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;}</span><span class="o">]&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;Order.where(number: &amp;ldquo;201504211405490&amp;rdquo;).as_json.class&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;=&gt;</span> <span class="no">Hash</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p></blockquote>

<p>I find that <code>as_json</code> can accepts some optons.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;blockquote&gt;&lt;p&gt;Order.where(number: &amp;ldquo;201504211405490&amp;rdquo;).as_json(only: :number)&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;=&gt;</span> <span class="o">[</span><span class="p">{</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">number</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">=&gt;&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="mi">201504211405490</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;}</span><span class="o">]&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p></blockquote>

<p>But one day I found somebody used similar options with <code>to_json</code> method.
I searched the doc. No doc says <code>to_json</code> can do things like following:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;blockquote&gt;&lt;p&gt;Order.where(number: &amp;ldquo;201504211405490&amp;rdquo;).to_json(only: :number)&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;=&gt;</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">[</span><span class="p">{\</span><span class="s2">&quot;number\&amp;rdquo;:\&amp;ldquo;201504211405490\&amp;rdquo;}]&quot;</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p></blockquote>

<p>But the code above actually works.
Is <code>to_json</code> uses <code>as_json</code> under the hood?</p>

<h3>Dive into the source</h3>

<p>Now we can check the source code to find the answer.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;blockquote&gt;&lt;p&gt;$ Order.where(number: &amp;ldquo;201504211405490&amp;rdquo;).to_json&lt;/</span><span class="nb">p</span><span class="o">&gt;&lt;</span><span class="sr">/blockquote&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;From: /</span><span class="no">Users</span><span class="o">/</span><span class="n">lingceng</span><span class="o">/.</span><span class="n">rvm</span><span class="o">/</span><span class="n">gems</span><span class="o">/</span><span class="n">ruby</span><span class="o">-</span><span class="mi">2</span><span class="o">.</span><span class="mi">2</span><span class="o">.</span><span class="mi">0</span><span class="vi">@baozheng</span><span class="o">/</span><span class="n">gems</span><span class="o">/</span><span class="n">activesupport</span><span class="o">-</span><span class="mi">4</span><span class="o">.</span><span class="mi">2</span><span class="o">.</span><span class="mi">0</span><span class="o">/</span><span class="n">lib</span><span class="o">/</span><span class="n">active_support</span><span class="o">/</span><span class="n">core_ext</span><span class="o">/</span><span class="n">object</span><span class="o">/</span><span class="n">json</span><span class="o">.</span><span class="n">rb</span> <span class="err">@</span> <span class="n">line</span> <span class="mi">31</span><span class="p">:</span>
</span><span class='line'><span class="ss">Owner</span><span class="p">:</span> <span class="no">Object</span>
</span><span class='line'><span class="ss">Visibility</span><span class="p">:</span> <span class="kp">public</span>
</span><span class='line'><span class="no">Number</span> <span class="n">of</span> <span class="ss">lines</span><span class="p">:</span> <span class="mi">9</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;def to_json_with_active_support_encoder(options = nil)</span>
</span><span class='line'><span class="sr">  if options.is_a?(::JSON::State)&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="c1"># Called from JSON.{generate,dump}, forward it to JSON gem&#39;s to_json</span>
</span><span class='line'><span class="nb">self</span><span class="o">.</span><span class="n">to_json_without_active_support_encoder</span><span class="p">(</span><span class="n">options</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">else</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;# to_json is being invoked directly, use ActiveSupport&#39;s encoder</span>
</span><span class='line'><span class="sr">ActiveSupport::JSON.encode(self, options)</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end</span>
</span><span class='line'><span class="sr">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Then we edit the method and add a <strong>binding.pry</strong> before the <code>if options.is_a?(::JSON::State)</code> line.
<strong>Remember to recover the change after debug.</strong></p>

<pre><code>&gt; edit Order.where(number: "201504211405490").to_json
</code></pre>

<p>Then run code again:</p>

<pre><code>&gt; Order.where(number: "201504211405490").to_json
</code></pre>

<p>Now we&rsquo;ll get into <code>to_json_with_active_support_encoder</code> method and start to debug.
After some <strong>next</strong> and <strong>step</strong> comand.
We can find that <code>to_json</code> uses ActiveSupport::JSON.encode, which uses <code>as_json</code>.</p>

<pre><code># /lib/active_support/json/encoding.rb#34
# Encode the given object into a JSON string
def encode(value)
  stringify jsonify value.as_json(options.dup)
end
</code></pre>

<p>Yes! <code>to_json</code> uses <code>as_json</code>. We find the answer. So we can use to_json(only: :number) with
confidence.</p>

<h3>Conclusion</h3>

<p>Pry and pry-byebug provides many useful commands.
Using these commands can help to find the definition of a method, track the call stacks, understand the source structure.</p>

<p>This is beauty of open source.
Do not limit yourself.
Dive into the code and get your information.</p>
]]></content>
  </entry>
  
</feed>
