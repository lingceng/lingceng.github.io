<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: test | Lingceng's Blog]]></title>
  <link href="https://lingceng.github.io/blog/categories/test/atom.xml" rel="self"/>
  <link href="https://lingceng.github.io/"/>
  <updated>2017-07-30T10:26:49+08:00</updated>
  <id>https://lingceng.github.io/</id>
  <author>
    <name><![CDATA[Lingceng]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Minitest Mock And Stud]]></title>
    <link href="https://lingceng.github.io/blog/2014/03/18/minitest-mock-and-stud/"/>
    <updated>2014-03-18T08:28:00+08:00</updated>
    <id>https://lingceng.github.io/blog/2014/03/18/minitest-mock-and-stud</id>
    <content type="html"><![CDATA[<h3>Capture IO</h3>

<p>Use <code>capture_io</code> to test standard output.<br/>
<code>capture_io</code> uses StringIO to wrap $stdout and $stderr.</p>

<pre><code>out, err = capture_io do
  puts "Some info"
  warn "You did a bad thing"
end

assert_match /info/, out
assert_match /bad/, err
</code></pre>

<h3>Mock</h3>

<pre><code>class Stupidc
  def initialize(input=STDIN, output=STDOUT)
    @input = input
    @output = output
  end

  def say_hello()
    @output.puts 'hello'
  end
end


require 'minitest/autorun'

describe Stupidc do
  before do
    @input = MiniTest::Mock.new
    @output = MiniTest::Mock.new

    @stupidc = Stupidc.new(@input, @output)
  end


  it "should copy file to source when file is target" do
    @output.expect :puts, nil, ['hello']
    @stupidc.say_hello()
    @output.verify
  end
end
</code></pre>

<h3>Stub</h3>

<p>see <a href="https://github.com/seattlerb/minitest/blob/master/test/minitest/test_minitest_mock.rb">test</a></p>

<pre><code>def test_stub_yield_self
  obj = "foo"

  val = obj.stub :to_s, "bar" do |s|
    s.to_s
  end

  @tc.assert_equal "bar", val
end
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Basics About Minitest]]></title>
    <link href="https://lingceng.github.io/blog/2014/03/17/basics-about-minitest/"/>
    <updated>2014-03-17T07:58:00+08:00</updated>
    <id>https://lingceng.github.io/blog/2014/03/17/basics-about-minitest</id>
    <content type="html"><![CDATA[<p>With Ruby 1.9, MiniTest entered standard lib.<br/>
MiniTest is pretty small and readable, here are all source files:</p>

<pre><code>lib:
hoe  minitest

lib/hoe:
minitest.rb

lib/minitest:
autorun.rb  benchmark.rb  hell.rb  mock.rb  parallel_each.rb  pride.rb  spec.rb  unit.rb
</code></pre>

<h3>Assert Methods</h3>

<p>See Minitest::Assertions doc or unit.rb source</p>

<pre><code>assert assert_equal assert_raises
capture_io
refute refute_empty
...
</code></pre>

<h3>Specs Expections</h3>

<p>See Minitest::Expectations doc or spec.rb source</p>

<pre><code>must_be must_be_close_to
wont_be_empty
...
</code></pre>

<p>Most methods just redirect to assert methods internally.</p>

<h3>Simple Start</h3>

<p>Given that you&rsquo;d like to test the following class:</p>

<pre><code>class Meme
  def i_can_has_cheezburger?
    "OHAI!"
  end

  def will_it_blend?
    "YES!"
  end
end
</code></pre>

<p>Unit tests</p>

<pre><code>require 'minitest/autorun'

class TestMeme &lt; MiniTest::Unit::TestCase
  def setup
    @meme = Meme.new
  end

  def test_that_kitty_can_eat
    assert_equal "OHAI!", @meme.i_can_has_cheezburger?
  end

  def test_that_it_will_not_blend
    refute_match /^no/i, @meme.will_it_blend?
  end

  def test_that_will_be_skipped
    skip "test this later"
  end
end
</code></pre>

<p>Specs</p>

<pre><code># require 'minitest/unit'
# require 'minitest/spec'
# require 'minitest/mock'

require 'minitest/autorun'

describe Meme do
  before do
    @meme = Meme.new
  end

  describe "when asked about cheeseburgers" do
    it "must respond positively" do
      @meme.i_can_has_cheezburger?.must_equal "OHAI!"
    end
  end

  describe "when asked about blending possibilities" do
    it "won't say no" do
      @meme.will_it_blend?.wont_match /^no/i
    end
  end
end
</code></pre>

<ul>
<li>home :: <a href="https://github.com/seattlerb/minitest">https://github.com/seattlerb/minitest</a></li>
<li>rdoc :: <a href="http://docs.seattlerb.org/minitest">http://docs.seattlerb.org/minitest</a></li>
<li>vim  :: <a href="https://github.com/sunaku/vim-ruby-minitest">https://github.com/sunaku/vim-ruby-minitest</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
