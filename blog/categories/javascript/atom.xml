<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: javascript | Lingceng's Blog]]></title>
  <link href="https://lingceng.github.io/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="https://lingceng.github.io/"/>
  <updated>2018-03-28T15:11:35+08:00</updated>
  <id>https://lingceng.github.io/</id>
  <author>
    <name><![CDATA[Lingceng]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Custom Quill.js To Add More Attributes To Image]]></title>
    <link href="https://lingceng.github.io/blog/2018/03/28/custom-quill-dot-js-to-add-more-attributes-to-image/"/>
    <updated>2018-03-28T15:02:00+08:00</updated>
    <id>https://lingceng.github.io/blog/2018/03/28/custom-quill-dot-js-to-add-more-attributes-to-image</id>
    <content type="html"><![CDATA[<p>Quill.js image default only allow &lsquo;src&rsquo;, &lsquo;alt&rsquo; &lsquo;height&rsquo; and &lsquo;width&rsquo; attribute.<br/>
Here are the solutions to add more attributes to image when initializing from fulltext html.</p>

<p>Solution1:
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">class</span> <span class="nx">ImageBlot</span> <span class="kr">extends</span> <span class="nx">Image</span> <span class="p">{</span>
</span><span class='line'>  <span class="kr">static</span> <span class="nx">create</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">value</span> <span class="o">==</span> <span class="s1">&#39;string&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="kr">super</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">value</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">value</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">}</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="kr">static</span> <span class="nx">value</span><span class="p">(</span><span class="nx">domNode</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="k">return</span> <span class="nx">domNode</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">Quill</span><span class="p">.</span><span class="nx">register</span><span class="p">(</span><span class="nx">ImageBlot</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Solution2:
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">class</span> <span class="nx">ImageBlot</span> <span class="kr">extends</span> <span class="nx">Image</span> <span class="p">{</span>
</span><span class='line'>  <span class="kr">static</span> <span class="nx">get</span> <span class="nx">ATTRIBUTES</span><span class="p">()</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="k">return</span> <span class="p">[</span> <span class="s1">&#39;alt&#39;</span><span class="p">,</span> <span class="s1">&#39;height&#39;</span><span class="p">,</span> <span class="s1">&#39;width&#39;</span><span class="p">,</span> <span class="s1">&#39;class&#39;</span><span class="p">,</span> <span class="s1">&#39;data-original&#39;</span><span class="p">,</span> <span class="s1">&#39;data-width&#39;</span><span class="p">,</span> <span class="s1">&#39;data-height&#39;</span><span class="p">,</span> <span class="s1">&#39;style-data&#39;</span> <span class="p">]</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">}</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="kr">static</span> <span class="nx">formats</span><span class="p">(</span><span class="nx">domNode</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">ATTRIBUTES</span><span class="p">.</span><span class="nx">reduce</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">formats</span><span class="p">,</span> <span class="nx">attribute</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">domNode</span><span class="p">.</span><span class="nx">hasAttribute</span><span class="p">(</span><span class="nx">attribute</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">formats</span><span class="p">[</span><span class="nx">attribute</span><span class="p">]</span> <span class="o">=</span> <span class="nx">domNode</span><span class="p">.</span><span class="nx">getAttribute</span><span class="p">(</span><span class="nx">attribute</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">formats</span><span class="p">;</span>
</span><span class='line'><span class="p">},</span> <span class="p">{});</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">}</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="nx">format</span><span class="p">(</span><span class="nx">name</span><span class="p">,</span> <span class="nx">value</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">constructor</span><span class="p">.</span><span class="nx">ATTRIBUTES</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="o">&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">domNode</span><span class="p">.</span><span class="nx">setAttribute</span><span class="p">(</span><span class="nx">name</span><span class="p">,</span> <span class="nx">value</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">domNode</span><span class="p">.</span><span class="nx">removeAttribute</span><span class="p">(</span><span class="nx">name</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>  <span class="kr">super</span><span class="p">.</span><span class="nx">format</span><span class="p">(</span><span class="nx">name</span><span class="p">,</span> <span class="nx">value</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">Quill</span><span class="p">.</span><span class="nx">register</span><span class="p">(</span><span class="nx">ImageBlot</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>You can specify the whitelist for attributes with solution2.</p>

<p>The quill.js depends on parchment and quill-delta.<br/>
Parchment is Quill&rsquo;s document model. You can find Parchment.Embed here.<br/>
Deltas are a simple, yet expressive format that can be used to describe contents and changes.</p>

<p>I find the steps of initializing after diving into the source code and some debug:<br/>
constructor in core/quill.js &ndash;> clipboard.convert &ndash;> clipboard.matchBlot &ndash;> setContents &ndash;> applyDelta &ndash;> insertAt and formatAt<br/>
The matchBlot is key step for my solutions. It explains how quill compose the delta instance.</p>

<pre><code>let value = match.value(node);
embed[match.blotName] = value;
delta = new Delta().insert(embed, match.formats(node));
</code></pre>

<p><a href="https://github.com/quilljs/quill/">https://github.com/quilljs/quill/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Put javascript library files together in Rails]]></title>
    <link href="https://lingceng.github.io/blog/2015/12/15/put-javascript-library-files-together-in-rails/"/>
    <updated>2015-12-15T17:06:00+08:00</updated>
    <id>https://lingceng.github.io/blog/2015/12/15/put-javascript-library-files-together-in-rails</id>
    <content type="html"><![CDATA[<p><strong>TLDR: Put all javascript library files under <code>app/assets/libfolder</code>.
Refer the files without the <code>libfolder</code></strong></p>

<p>We always need to import some javascript libs to our Rails application.
Some libs has correspondent gems.
For example, <strong>jquery.js</strong> has a <strong>jquery-rails gem</strong>.</p>

<p>But some other libs may not have the correspondent gems.
What&rsquo;s more, it may be a waste to use a &ldquo;wrapper gem&rdquo; to just import a javascript file.
Some wrapper gem may not up-to-date to the origin javascript lib.
So we need to import javascript libs manually in some cases.</p>

<p>Rails default use <a href="https://github.com/sstephenson/sprockets">sprockets</a> to
manage assets.
And we always split assets into <code>javascripts</code>, <code>stylesheets</code>, <code>images</code> and <code>fonts</code> folders.
But if we split a javascript library into these files, it maybe a little messy.</p>

<p><strong>Actually we can put the files together in a same foler.</strong></p>

<p>For example, I want to import <a href="https://github.com/lipis/bootstrap-sweetalert">bootstrap-sweetalert</a>  into
my Rails app.
I download the <code>sweet-alert.less</code> and <code>sweet-alert.js</code>.
Then put the two files into <code>vender/assets/sweet-alert</code>.
<code>sweet-alert</code> here is a new created folder.</p>

<p>The <code>vender/assets/sweet-alert</code> folder will be treat as base path to query
assets. So we can refer the <code>sweet-alert.js</code> in our application.js as following:</p>

<pre><code> //= require sweet-alert
</code></pre>

<p>We can do the same for <code>sweet-alert.less</code> in our application.less.</p>

<p>Note that we have <a href="https://www.codefellows.org/blog/5-ways-to-manage-front-end-assets-in-rails">other ways to manage the assets</a>. But it&rsquo;s another topic then.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jQuery Source Structure Tip]]></title>
    <link href="https://lingceng.github.io/blog/2014/03/26/jquery-source-structure-tip/"/>
    <updated>2014-03-26T09:12:00+08:00</updated>
    <id>https://lingceng.github.io/blog/2014/03/26/jquery-source-structure-tip</id>
    <content type="html"><![CDATA[<p>I was puzzled when I first see the jQuery source code.
But I finally find a clue.</p>

<p>Put aside other modules, we can find out that jQuery has the ordinary JS class structrue.</p>

<pre><code>jQuery = function() {

}

jQuery.prototype = {

}
</code></pre>

<p><code>$</code> is alias of jQuery.</p>

<pre><code>// we can use the dollar sign to call the jQuery function
$ = jQuery;

// we can use the `jQuery.fn.newFeature = function() {}` to extend the jQuery instance function
// Why we can add fn key to jQuery?
// Answer is jQuery is a function and function is a object too. So we can add
// properties to function
jQuery.fn = jQuery.prototype;
</code></pre>

<p>But when <code>$("#someid")</code> always return a jQuery instance, where the <code>new</code> keyword?</p>

<pre><code>jQuery = function() {
    // jQuery.prototype.init is the actually creator function
    return new jQuery.fn.init( selector, context );
}

//  mount prototype on jQuery to jQuery.fn.init
jQuery.fn.init.prototype = jquery.fn
</code></pre>

<p>Let&rsquo;s see the complete struture now.</p>

<pre><code>// utils

// class structure
jQuery = function() {
    return new jQuery.fn.init( selector, context );
}
jQuery.fn = {
   init: function(selector, context) {}
   // other core instance methods
}
jQuery.fn = jQuery.prototype;
jQuery.fn.init.prototype = jquery.fn

// instance methods extend
// or use this style: jQuery.fn.hello = funtion() {}
jQuery.extend(jQuery.fn, {
   // ...
});

// class methods extend
// or use this style: jQuery.hello = funtion() {}
// maybe some utils
jQuery.extend(jQuery, {
  isFunction: function( obj ) {
    return jQuery.type(obj) === "function";
  }
  // ...
});

// module export or AMD
window.$ = window.jQuery = jQuery
</code></pre>
]]></content>
  </entry>
  
</feed>
