<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | Lingceng's Blog]]></title>
  <link href="http://lingceng.github.io/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://lingceng.github.io/"/>
  <updated>2016-03-20T12:30:41+08:00</updated>
  <id>http://lingceng.github.io/</id>
  <author>
    <name><![CDATA[Lingceng]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Keep Learning As a Ruby Programmer]]></title>
    <link href="http://lingceng.github.io/blog/2016/01/22/keep-learning-as-a-ruby-programmer/"/>
    <updated>2016-01-22T09:27:00+08:00</updated>
    <id>http://lingceng.github.io/blog/2016/01/22/keep-learning-as-a-ruby-programmer</id>
    <content type="html"><![CDATA[<p>I started learning Ruby and Rails about 3 years ago.<br/>
I always didn&rsquo;t know how to keep up with the community.<br/>
I find some clues nowadays. So I share the tips with you here.</p>

<p>Learn to cross The Great Wall if you are in China.</p>

<p><strong>First, use google well, collect everything useful.</strong><br/>
Then we can do following things.</p>

<h3>Keep up with news</h3>

<ul>
<li>rubyweekly</li>
<li>rubyinside</li>
<li>rubynews</li>
<li>reddit/r/ruby</li>
<li>reddit/r/rails</li>
</ul>


<h3>Know the persons</h3>

<p>Persons in ruby community are kind.<br/>
They do speeches, write blogs and publish books.<br/>
Follow them on twitter to get news about them.<br/>
Add their blogs to RSS reader.</p>

<ul>
<li>Aaron Patterson</li>
<li>DHH</li>
<li>Dave Tomas <a href="https://en.wikipedia.org/wiki/Dave_Thomas_">https://en.wikipedia.org/wiki/Dave_Thomas_</a>(programmer)</li>
<li><a href="http://blog.arkency.com/">http://blog.arkency.com/</a></li>
<li><a href="https://github.com/orgs/rails/people">https://github.com/orgs/rails/people</a></li>
<li>Github search with: language:Ruby followers:>300</li>
</ul>


<h3>Involve in</h3>

<ul>
<li>Read the source code of projects</li>
<li>Report issues and fix bugs</li>
<li>Maintain your open source project</li>
<li>Share by blogs, speeches and books</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Save Your Time: Install ruby2.3.0 with RVM]]></title>
    <link href="http://lingceng.github.io/blog/2016/01/19/save-your-time-install-ruby2-dot-3-0-with-rvm/"/>
    <updated>2016-01-19T12:24:00+08:00</updated>
    <id>http://lingceng.github.io/blog/2016/01/19/save-your-time-install-ruby2-dot-3-0-with-rvm</id>
    <content type="html"><![CDATA[<p>Note that:  <strong>ruby-2.3.0</strong> is not present now when run <code>rvm list known</code> command in rvm 1.26.11.<br/>
It may be available in next rvm version.
See <a href="https://github.com/rvm/rvm/blob/1.26.11/config/known#L11">here</a> for more details.</p>

<p>But you can just run the following directly.</p>

<pre><code>rvm install ruby-2.3.0
</code></pre>

<p>And set 2.3.0 as default ruby version</p>

<pre><code>rvm --default use 2.3.0
</code></pre>

<p>Copy gems from older version</p>

<pre><code>rvm gemset copy 2.1.5 2.3.0
</code></pre>

<p>Get the ruby version and celebrate!</p>

<pre><code>ruby -v
# ruby 2.3.0p0 (2015-12-25 revision 53290) [x86_64-darwin15]
</code></pre>

<p>Try new features in irb</p>

<pre><code>puts 'hi'&amp;.upcase

h = { a: 1, b: 2, c: 3, d: 4 }
[ :a, :c, :d, :b ].map(&amp;h)
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails Time Best Practice]]></title>
    <link href="http://lingceng.github.io/blog/2014/11/22/rails-time-best-practice/"/>
    <updated>2014-11-22T18:38:00+08:00</updated>
    <id>http://lingceng.github.io/blog/2014/11/22/rails-time-best-practice</id>
    <content type="html"><![CDATA[<h4>Setup</h4>

<p>Let&rsquo;s create a demo table and do some configurations in a rails project.
Then we&rsquo;ll do some tests about time in <code>rails console</code>.</p>

<pre><code>class CreateHellos &lt; ActiveRecord::Migration
  def change
    create_table :hellos do |t|
      t.timestamps
    end
  end
end
</code></pre>

<p>Add following to <code>config/application.rb</code></p>

<pre><code>Rails.application.config.active_record.default_timezone = :local
Rails.application.config.time_zone = 'Beijing'
</code></pre>

<p><code>config.time_zone</code> sets the default time zone for the application
and enables time zone awareness for Active Record.</p>

<p><code>config.active_record.default_timezone</code> determines whether to use Time.local
 (if set to :local) or Time.utc (if set to :utc) when pulling dates and times
from the database.  The default is :utc.</p>

<h4><code>to_s(:db)</code> is error-prone</h4>

<p>Run following codes in rails console.
Here CST stands for (China Standard Time) which is zone name for Beijing.</p>

<pre><code>l = FinanceItem.create
#=&gt; #&lt;FinanceItem id: 1, created_at: "2014-11-22 03:00:32", updated_at: "2014-11-22 03:00:32" &gt;
l.created_at
#=&gt; Sat, 22 Nov 2014 11:00:32 CST +08:00
</code></pre>

<p>The timezone offset is <strong>+08:00</strong> because I set <code>config.time_zone = 'Beijing'</code></p>

<pre><code>l.created_at.class
#=&gt; ActiveSupport::TimeWithZone
</code></pre>

<p>Rails use <a href="http://api.rubyonrails.org/classes/ActiveSupport/TimeWithZone.html#method-i-to_s">ActiveSupport::TimeWithZone</a> for datetime field.</p>

<pre><code>l.created_at.strftime("%Y-%m-%d %H:%M%S")
#=&gt; "2014-11-22 11:00:32"
l.created_at.to_s(:db)
#=&gt; "2014-11-22 03:00:32"
</code></pre>

<p>We can see, two date strings are different.
Because <code>to_s(:db)</code> always output time string in UTC.
<code>strftime</code> or <code>to_s</code> ouptut time string with configured time zone.</p>

<p>Here is the <code>TimewithZone#to_s(format)</code> source:</p>

<pre><code>:default - default value, mimics Ruby 1.9 Time#to_s format.
:db - format outputs time in UTC :db time. See Time#to_formatted_s(:db).
Any key in Time::DATE_FORMATS can be used. See active_support/core_ext/time/conversions.rb.
# File activesupport/lib/active_support/time_with_zone.rb, line 193
def to_s(format = :default)
  if format == :db
    utc.to_s(format)
  elsif formatter = ::Time::DATE_FORMATS[format]
    formatter.respond_to?(:call) ? formatter.call(self).to_s : strftime(formatter)
  else
    "#{time.strftime("%Y-%m-%d %H:%M:%S")} #{formatted_offset(false, 'UTC')}" # mimicking Ruby 1.9 Time#to_s format
  end
end
</code></pre>

<p>How about <code>Time#to_s(:db)</code> and <code>Time#strftime("%Y-%m-%d %H:%M:%S")</code>?
Here zone name is CST because my system local is &lsquo;Beijing&rsquo;.
It&rsquo;s different with TimeWithZone which get zone from project configurations <code>config.time_zone</code>.</p>

<pre><code>a = Time.now
=&gt; 2015-03-12 16:56:21
a.zone
=&gt; "CST"
a.to_s(:db)
=&gt; "2015-03-12 16:56:21"
a.strftime("%Y-%m-%d %H:%M:%S")
=&gt; "2015-03-12 16:56:21"
</code></pre>

<p><code>Time#to_s(:db)</code> and <code>Time#strftime("%Y-%m-%d %H:%M:%S")</code> output the same.
We can find out that <code>Time#to_s(:db)</code> is actually called Time#strftime(&lsquo;%Y-%m-%d %H:%M:%S&rsquo;) from source</p>

<p>As we can see, <code>to_s(:db)</code> is NOT consistent between Time and TimeWithZone.
TimeWithZone#to_s(:db) will generate time string of UTC.
Time#to_s(:db) will return time string of configured local.</p>

<p>So calling <code>to_s(:db)</code> is always error-prone. Do not use it unless you know what you are doing.
And you&rsquo;d better not use Time and TimeWithZone interchangeably.</p>

<h4>Time.zone.parse get time with timezone</h4>

<p>Let&rsquo;s try following codes.</p>

<pre><code>a = DateTime.parse('2014-11-22 12:35:05')
#=&gt; Sat, 22 Nov 2014 12:35:05 +0000
a.to_s(:rfc822)
#=&gt; "Sat, 22 Nov 2014 12:35:05 +0000"
a.in_time_zone.to_s(:rfc822)
#=&gt; "Sat, 22 Nov 2014 20:35:05 +0800"

b = Time.zone.parse('2014-11-22 12:35:05')
#=&gt; 2014-11-22 12:35:05
b.to_s(:rfc822)
#=&gt; "Sat, 22 Nov 2014 12:35:05 +0800"
</code></pre>

<p>Notice that <code>Time.zone.parse</code> has <code>+0800</code> timezone offset but <code>DateTime.parse</code>
has &lsquo;+0000&rsquo; timezone offset.</p>

<p>So <code>Time.zone.parse</code> may be better for you.</p>

<h3>Time.now vs Time.current</h3>

<p>Let&rsquo;s see the definition of <code>Time.current</code></p>

<pre><code># File activesupport/lib/active_support/core_ext/time/calculations.rb, line 29
def current
  ::Time.zone ? ::Time.zone.now : ::Time.now
end
</code></pre>

<p>Time.now uses the <strong>system time zone</strong> because it&rsquo;s is part of the Ruby standard library.
Time.zone.now will set zone with <code>config.time_zone</code>.</p>

<p>Using <code>Time.now</code> make troubles when your system time zone is different with
<code>config.time_zone</code></p>

<h3>Best practice</h3>

<p>Set the following config.</p>

<pre><code>config.active_record.default_timezone = :local
config.time_zone = 'YourLocalName'
</code></pre>

<p>Use <code>Time.zone.parse</code> and do <strong>NOT</strong> use <code>DateTime.parse</code>.</p>

<p>Use <code>Time.zone.now</code> or <code>Time.current</code> and do <strong>NOT</strong> use <code>Time.now</code>.</p>

<p>Thus we can keep all time class to TimeWithZone and get consistent behavior.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Turbolink Best Practice]]></title>
    <link href="http://lingceng.github.io/blog/2014/10/16/turbolink-best-practice/"/>
    <updated>2014-10-16T12:12:00+08:00</updated>
    <id>http://lingceng.github.io/blog/2014/10/16/turbolink-best-practice</id>
    <content type="html"><![CDATA[<h2>What does Turbolink do?</h2>

<p><a href="https://github.com/rails/turbolinks">Turbolink</a> makes browser only replace page&rsquo;s <code>&lt;body&gt;</code> and <code>&lt;title&gt;</code> to simulate page jumping.</p>

<p>TLDR:
Javascript context will be kept even after page jumpings.
So you need to take care all cases of javascript global handles.
eg. global events bindings, global varibles, global timmers.</p>

<h2>What&rsquo;s the best practice?</h2>

<p>Put all JavaScript and CSS in <code>&lt;HEAD&gt;</code> and keep <code>&lt;HEAD&gt;</code> the same in every page.</p>

<p>Use <a href="https://coderwall.com/p/ypzfdw/faster-page-loads-with-turbolinks">jquery.turbolink</a> to hijack <code>jQuery.ready()</code>.</p>

<p>jquery.turbolink make sure all events binded with <strong>jQuery.ready()</strong> or <strong>jQuery()</strong> are triggered.
No matter you are doing a fresh page load or turbolink jumps.</p>

<p>You should load scripts in following order:</p>

<pre><code>jQuery
jQuery.turbolinks
...other scripts go here...
Turbolinks
</code></pre>

<p><a href="https://coderwall.com/p/ypzfdw/faster-page-loads-with-turbolinks">Here</a>
explains why you should put tubolink at last:</p>

<blockquote><p>The reason for jQuery.turbolinks being before all scripts is so to let
it hijack the <code>$(function() { ... })</code> call that your other scripts will use.</p>

<p>Turbolinks then needs to be at the end because it has to be the last
to install the click handler, so not to interfere with other scripts.</p></blockquote>

<h2>Take care of dangerous global handles</h2>

<p>Global delegated events will effect every page.
eg. You add a script as following:</p>

<pre><code>$(document).on('click', 'button', function(){
  console.log("clicked button")
})
</code></pre>

<p>&ldquo;clicked button&rdquo; will be printed when you click a button <strong>in every pages</strong>.</p>

<p>Another example is the hijacked jquery ready event as mentioned above.
So you should distinguish pages in you codes. eg.</p>

<pre><code>$(function() {
  if (current_page == 'index') {
    // do staff for index page
  }
});
</code></pre>

<p>See details about distinguishing pages below.</p>

<p>Global <code>setInterval</code> or <code>setTimeout</code> need to be clear too! DEMO:</p>

<pre><code>$(document).one('page:before-change', function(event) {
  clearTheTimer();
}
</code></pre>

<p>See more <a href="http://staal.io/blog/2013/01/18/dangers-of-turbolinks/">here</a></p>

<h2>How to control javascript init for every page?</h2>

<p>Mark <code>&lt;body&gt;</code> with tags then trigger it according to tag. eg.
I want javascript only run in topics pages in my rails app:</p>

<pre><code>// In app/views/layouts/application.html.erb
&lt;body data-controller-name="&lt;%= controller_name %&gt;"&gt;

// In topics.coffee
window.Topics =
  replies_per_page: 50
  init : () -&gt;
    console.log "hello"

$(document).ready -&gt;
  if $('body').data('controller-name') in ['topics']
    Topics.init()

// Add topics to appliction.js
//= require topics
</code></pre>

<h2>You can put javascript at the end of body.</h2>

<p>But it&rsquo;s not recommended.
You will loose benefit with HTTP cache when you put javascript at the and of the
body.</p>

<p>And if you add code with hijack jquery ready event like following:</p>

<pre><code>$(document).ready -&gt;
  console.log 'hello'
</code></pre>

<p>After jumps in and out with turbolink.
The ready events will be bind twice.</p>

<p>Problem can not be solved even add the <code>data-turbolinks-eval=false</code> tag.
<code>data-turbolinks-eval=false</code> can avoid the events being muti-binded.
But the <code>console.log 'hello'</code> has already registered in the ready event.
So the &lsquo;hello&rsquo; will be printed in every page.</p>

<h2>What will happen when I changed head content?</h2>

<p>It depends on how you change it.</p>

<p>If you add some <code>&lt;script type="text/javascript"&gt;</code> tag in head, eg.</p>

<pre><code>// On page B
&lt;script type="text/javascript"&gt;
  console.log('hello')
&lt;/script&gt;
</code></pre>

<p>When you click a link on page A and jump to page B, the &lsquo;hello&rsquo; will <strong>not</strong> printed.
The script tag will be ignored.</p>

<p>It&rsquo;s the same when you make it a <code>src</code> link.</p>

<pre><code>// On page B
&lt;script type="text/javascript" src='hello.js'&gt; &lt;/script&gt;
</code></pre>

<p>You can add a <code>data-turbolinks-track</code> tag to make it work. But it has drawbacks.</p>

<pre><code>&lt;script type="text/javascript" src="http://lingceng.github.io/hello.js" data-turbolinks-track&gt;&lt;/script&gt;
</code></pre>

<p>When this case, &lsquo;hello&rsquo; will be printed,
every things seems fine except <strong>slow page load</strong>.</p>

<p>You&rsquo;ll technically be requesting the same page twice.
Once through Turbolinks to detect that the assets changed,
and then again do a full redirect to that page.</p>

<p>You should always add <code>data-turbolinks-track</code> to JavaScript and CSS links.
This will trigger full page load when your assets changed.</p>

<p>When page A and page B have different <code>track targets</code>,
every switch between them will cause <code>double load</code>.</p>

<p>See the <a href="https://github.com/rails/turbolinks/blob/master/lib%2Fassets%2Fjavascripts%2Fturbolinks.js.coffee#L231">code</a>
to know the details</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">extractTrackAssets = </span><span class="p">(</span><span class="nx">doc</span><span class="p">)</span> <span class="o">&amp;</span><span class="nx">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="k">for</span> <span class="nx">node</span> <span class="k">in</span> <span class="nx">doc</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">head</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;).</span><span class="nx">childNodes</span> <span class="k">when</span> <span class="nx">node</span><span class="p">.</span><span class="nx">getAttribute</span><span class="o">?</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">data</span><span class="o">-</span><span class="nx">turbolinks</span><span class="o">-</span><span class="nx">track</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;)</span><span class="o">?&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nx">node</span><span class="p">.</span><span class="nx">getAttribute</span><span class="p">(</span><span class="s">&#39;src&#39;</span><span class="p">)</span> <span class="o">or</span> <span class="nx">node</span><span class="p">.</span><span class="nx">getAttribute</span><span class="p">(</span><span class="s">&#39;href&#39;</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="nx">code</span><span class="o">&gt;&lt;/</span><span class="nx">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nv">assetsChanged = </span><span class="p">(</span><span class="nx">doc</span><span class="p">)</span> <span class="o">&amp;</span><span class="nx">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="nx">loadedAssets</span> <span class="o">||=</span> <span class="nx">extractTrackAssets</span> <span class="nb">document</span>
</span><span class='line'>  <span class="nv">fetchedAssets  = </span><span class="nx">extractTrackAssets</span> <span class="nx">doc</span>
</span><span class='line'>  <span class="nx">fetchedAssets</span><span class="p">.</span><span class="nx">length</span> <span class="o">isnt</span> <span class="nx">loadedAssets</span><span class="p">.</span><span class="nx">length</span> <span class="o">or</span> <span class="nx">intersection</span><span class="p">(</span><span class="nx">fetchedAssets</span><span class="p">,</span> <span class="nx">loadedAssets</span><span class="p">).</span><span class="nx">length</span> <span class="o">isnt</span> <span class="nx">loadedAssets</span><span class="p">.</span><span class="nx">length</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>One last rescue is to prevent turbolink jump by add <code>data-no-turbolink</code> tag.
And then you will not benefit from turbolink speed boost.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;http://lingceng.github.io/&quot;</span><span class="nt">&gt;</span>Home (via Turbolinks)<span class="nt">&lt;/a&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;some-div&quot;</span> <span class="na">data-no-turbolink</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;http://lingceng.github.io/&quot;</span><span class="nt">&gt;</span>Home (without Turbolinks)<span class="nt">&lt;/a&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[minitest mock and stud]]></title>
    <link href="http://lingceng.github.io/blog/2014/03/18/minitest-mock-and-stud/"/>
    <updated>2014-03-18T08:28:00+08:00</updated>
    <id>http://lingceng.github.io/blog/2014/03/18/minitest-mock-and-stud</id>
    <content type="html"><![CDATA[<h3>capture io</h3>

<p>Use <code>capture_io</code> to test output.
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">out</span><span class="p">,</span> <span class="n">err</span> <span class="o">=</span> <span class="n">capture_io</span> <span class="k">do</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="no">Some</span> <span class="n">info</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span>
</span><span class='line'>  <span class="nb">warn</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="no">You</span> <span class="n">did</span> <span class="n">a</span> <span class="n">bad</span> <span class="n">thing</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;assert_match %r%info%, out</span>
</span><span class='line'><span class="sr">assert_match %r%bad%, err</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>mock</h3>

<p><code>capture_io</code> uses StringIO to wrap $stdout and $stderr.
How to simulate user input or socket talks? Mock may do the job.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>stupidc.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Stupidc</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">input</span><span class="o">=</span><span class="no">STDIN</span><span class="p">,</span> <span class="n">output</span><span class="o">=</span><span class="no">STDOUT</span><span class="p">)</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;@input = input</span>
</span><span class='line'><span class="sr">@output = output</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">def</span> <span class="nf">say_hello</span><span class="p">()</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;@output.puts &#39;hello&#39;</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end</span>
</span><span class='line'><span class="sr">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>stupidc_spec.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">minitest</span><span class="o">/</span><span class="n">autorun</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;describe Stupidc do</span>
</span><span class='line'><span class="sr">  before do&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="vi">@input</span> <span class="o">=</span> <span class="ss">MiniTest</span><span class="p">:</span><span class="ss">:Mock</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="vi">@output</span> <span class="o">=</span> <span class="ss">MiniTest</span><span class="p">:</span><span class="ss">:Mock</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>
</span><span class='line'><span class="vi">@stupidc</span> <span class="o">=</span> <span class="no">Stupidc</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="vi">@input</span><span class="p">,</span> <span class="vi">@output</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  it &amp;ldquo;should copy file to source when file is target&amp;rdquo; do&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="vi">@output</span><span class="o">.</span><span class="n">expect</span> <span class="ss">:puts</span><span class="p">,</span> <span class="kp">nil</span><span class="p">,</span> <span class="o">[</span><span class="s1">&#39;hello&#39;</span><span class="o">]</span>
</span><span class='line'><span class="vi">@stupidc</span><span class="o">.</span><span class="n">say_hello</span><span class="p">()</span>
</span><span class='line'><span class="vi">@output</span><span class="o">.</span><span class="n">verify</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>stub</h3>

<p>Stub has similar function with mock, but no need to inject a property.
Stub can simulate module methods or instance methods (They are the same in ruby, all class is the instance of Class) with ease.
see <a href="https://github.com/seattlerb/minitest/blob/master/test/minitest/test_minitest_mock.rb">test</a></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">test_stub_yield_self</span>
</span><span class='line'>  <span class="n">obj</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">foo</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  val = obj.stub :to_s, &amp;ldquo;bar&amp;rdquo; do |s|&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">s</span><span class="o">.</span><span class="n">to_s</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  @tc.assert_equal &amp;ldquo;bar&amp;rdquo;, val</span>
</span><span class='line'><span class="sr">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
</feed>
